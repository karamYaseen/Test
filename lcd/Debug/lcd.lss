
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000267c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  0000267c  000026f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ab8  00000000  00000000  00002714  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c88  00000000  00000000  000041cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00004e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00004fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005143  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007188  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008289  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000920c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000938c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000964e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <main>
      7a:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e7       	ldi	r26, 0x7B	; 123
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 05 13 	jmp	0x260a	; 0x260a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e7       	ldi	r24, 0x7B	; 123
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 21 13 	jmp	0x2642	; 0x2642 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6b e7       	ldi	r22, 0x7B	; 123
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 15 13 	jmp	0x262a	; 0x262a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_enu_Init>:
    /* MCAL */
    #include "DIO_Private.h"
    #include "DIO_Confiq.h"
    
    ES_t DIO_enu_Init          	  (void)
        {
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
            DIO_u8_DDRA_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	10 82       	st	Z, r1
                                DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION);

            DIO_u8_DDRB_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     c9c:	e7 e3       	ldi	r30, 0x37	; 55
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	10 82       	st	Z, r1
                                DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION);

            DIO_u8_DDRC_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     ca2:	e4 e3       	ldi	r30, 0x34	; 52
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	10 82       	st	Z, r1
                                DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION);

            DIO_u8_DDRD_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     ca8:	e1 e3       	ldi	r30, 0x31	; 49
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	10 82       	st	Z, r1
                                DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION);

            DIO_u8_PORTA_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     cae:	eb e3       	ldi	r30, 0x3B	; 59
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	10 82       	st	Z, r1
            		DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE);

            DIO_u8_PORTB_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     cb4:	e8 e3       	ldi	r30, 0x38	; 56
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	10 82       	st	Z, r1
                                DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE);

            DIO_u8_PORTC_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     cba:	e5 e3       	ldi	r30, 0x35	; 53
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	10 82       	st	Z, r1
                                DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE);

            DIO_u8_PORTD_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     cc0:	e2 e3       	ldi	r30, 0x32	; 50
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	10 82       	st	Z, r1
                                DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);       
        return STD_TYPES_OK;
     cc6:	80 e0       	ldi	r24, 0x00	; 0
        }
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <DIO_enu_SetPinDirection>:

    ES_t DIO_enu_SetPinDirection  (u8 Copy_u8_PortId,u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
        {
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <DIO_enu_SetPinDirection+0x6>
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <DIO_enu_SetPinDirection+0x8>
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <DIO_enu_SetPinDirection+0xa>
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	8a 83       	std	Y+2, r24	; 0x02
     cde:	6b 83       	std	Y+3, r22	; 0x03
     ce0:	4c 83       	std	Y+4, r20	; 0x04
                    
            u8 Local_u8_ErrorState = STD_TYPES_OK;
     ce2:	19 82       	std	Y+1, r1	; 0x01
            if((Copy_u8_PortId <= DIO_u8_PORTD) && (Copy_u8_PinId <= DIO_u8_PIN7) && ((Copy_u8_PinDirection == DIO_u8_OUTPUT)||(Copy_u8_PinDirection == DIO_u8_INPUT))){
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	84 30       	cpi	r24, 0x04	; 4
     ce8:	08 f0       	brcs	.+2      	; 0xcec <DIO_enu_SetPinDirection+0x1e>
     cea:	b5 c0       	rjmp	.+362    	; 0xe56 <DIO_enu_SetPinDirection+0x188>
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	88 30       	cpi	r24, 0x08	; 8
     cf0:	08 f0       	brcs	.+2      	; 0xcf4 <DIO_enu_SetPinDirection+0x26>
     cf2:	b1 c0       	rjmp	.+354    	; 0xe56 <DIO_enu_SetPinDirection+0x188>
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	21 f0       	breq	.+8      	; 0xd02 <DIO_enu_SetPinDirection+0x34>
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	88 23       	and	r24, r24
     cfe:	09 f0       	breq	.+2      	; 0xd02 <DIO_enu_SetPinDirection+0x34>
     d00:	aa c0       	rjmp	.+340    	; 0xe56 <DIO_enu_SetPinDirection+0x188>
                switch (Copy_u8_PortId)
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	3e 83       	std	Y+6, r19	; 0x06
     d0a:	2d 83       	std	Y+5, r18	; 0x05
     d0c:	6d 81       	ldd	r22, Y+5	; 0x05
     d0e:	7e 81       	ldd	r23, Y+6	; 0x06
     d10:	61 30       	cpi	r22, 0x01	; 1
     d12:	71 05       	cpc	r23, r1
     d14:	d1 f1       	breq	.+116    	; 0xd8a <DIO_enu_SetPinDirection+0xbc>
     d16:	8d 81       	ldd	r24, Y+5	; 0x05
     d18:	9e 81       	ldd	r25, Y+6	; 0x06
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	91 05       	cpc	r25, r1
     d1e:	34 f4       	brge	.+12     	; 0xd2c <DIO_enu_SetPinDirection+0x5e>
     d20:	2d 81       	ldd	r18, Y+5	; 0x05
     d22:	3e 81       	ldd	r19, Y+6	; 0x06
     d24:	21 15       	cp	r18, r1
     d26:	31 05       	cpc	r19, r1
     d28:	71 f0       	breq	.+28     	; 0xd46 <DIO_enu_SetPinDirection+0x78>
     d2a:	97 c0       	rjmp	.+302    	; 0xe5a <DIO_enu_SetPinDirection+0x18c>
     d2c:	6d 81       	ldd	r22, Y+5	; 0x05
     d2e:	7e 81       	ldd	r23, Y+6	; 0x06
     d30:	62 30       	cpi	r22, 0x02	; 2
     d32:	71 05       	cpc	r23, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_enu_SetPinDirection+0x6a>
     d36:	4b c0       	rjmp	.+150    	; 0xdce <DIO_enu_SetPinDirection+0x100>
     d38:	8d 81       	ldd	r24, Y+5	; 0x05
     d3a:	9e 81       	ldd	r25, Y+6	; 0x06
     d3c:	83 30       	cpi	r24, 0x03	; 3
     d3e:	91 05       	cpc	r25, r1
     d40:	09 f4       	brne	.+2      	; 0xd44 <DIO_enu_SetPinDirection+0x76>
     d42:	67 c0       	rjmp	.+206    	; 0xe12 <DIO_enu_SetPinDirection+0x144>
     d44:	8a c0       	rjmp	.+276    	; 0xe5a <DIO_enu_SetPinDirection+0x18c>
                {
                case DIO_u8_PORTA:BIT_WRT(DIO_u8_DDRA_REG, Copy_u8_PinId, Copy_u8_PinDirection);break;
     d46:	aa e3       	ldi	r26, 0x3A	; 58
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	ea e3       	ldi	r30, 0x3A	; 58
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	48 2f       	mov	r20, r24
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_enu_SetPinDirection+0x94>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	2a 95       	dec	r18
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_enu_SetPinDirection+0x90>
     d66:	80 95       	com	r24
     d68:	48 23       	and	r20, r24
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	b9 01       	movw	r22, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <DIO_enu_SetPinDirection+0xb0>
     d7a:	66 0f       	add	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	8a 95       	dec	r24
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <DIO_enu_SetPinDirection+0xac>
     d82:	cb 01       	movw	r24, r22
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	68 c0       	rjmp	.+208    	; 0xe5a <DIO_enu_SetPinDirection+0x18c>
                case DIO_u8_PORTB:BIT_WRT(DIO_u8_DDRB_REG, Copy_u8_PinId, Copy_u8_PinDirection);break;
     d8a:	a7 e3       	ldi	r26, 0x37	; 55
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e7 e3       	ldi	r30, 0x37	; 55
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_enu_SetPinDirection+0xd8>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	2a 95       	dec	r18
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_enu_SetPinDirection+0xd4>
     daa:	80 95       	com	r24
     dac:	48 23       	and	r20, r24
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	88 2f       	mov	r24, r24
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	b9 01       	movw	r22, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_enu_SetPinDirection+0xf4>
     dbe:	66 0f       	add	r22, r22
     dc0:	77 1f       	adc	r23, r23
     dc2:	8a 95       	dec	r24
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_enu_SetPinDirection+0xf0>
     dc6:	cb 01       	movw	r24, r22
     dc8:	84 2b       	or	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	46 c0       	rjmp	.+140    	; 0xe5a <DIO_enu_SetPinDirection+0x18c>
                case DIO_u8_PORTC:BIT_WRT(DIO_u8_DDRC_REG, Copy_u8_PinId, Copy_u8_PinDirection);break;
     dce:	a4 e3       	ldi	r26, 0x34	; 52
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e4 e3       	ldi	r30, 0x34	; 52
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 c0       	rjmp	.+4      	; 0xdea <DIO_enu_SetPinDirection+0x11c>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	2a 95       	dec	r18
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <DIO_enu_SetPinDirection+0x118>
     dee:	80 95       	com	r24
     df0:	48 23       	and	r20, r24
     df2:	8c 81       	ldd	r24, Y+4	; 0x04
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	88 2f       	mov	r24, r24
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	b9 01       	movw	r22, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_enu_SetPinDirection+0x138>
     e02:	66 0f       	add	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	8a 95       	dec	r24
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_enu_SetPinDirection+0x134>
     e0a:	cb 01       	movw	r24, r22
     e0c:	84 2b       	or	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	24 c0       	rjmp	.+72     	; 0xe5a <DIO_enu_SetPinDirection+0x18c>
                case DIO_u8_PORTD:BIT_WRT(DIO_u8_DDRD_REG, Copy_u8_PinId, Copy_u8_PinDirection);break;
     e12:	a1 e3       	ldi	r26, 0x31	; 49
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e1 e3       	ldi	r30, 0x31	; 49
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_enu_SetPinDirection+0x160>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	2a 95       	dec	r18
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_enu_SetPinDirection+0x15c>
     e32:	80 95       	com	r24
     e34:	48 23       	and	r20, r24
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	b9 01       	movw	r22, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_enu_SetPinDirection+0x17c>
     e46:	66 0f       	add	r22, r22
     e48:	77 1f       	adc	r23, r23
     e4a:	8a 95       	dec	r24
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_enu_SetPinDirection+0x178>
     e4e:	cb 01       	movw	r24, r22
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_enu_SetPinDirection+0x18c>
                }
            }
            else
            {
                Local_u8_ErrorState = STD_TYPES_NOK;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	89 83       	std	Y+1, r24	; 0x01
            }
            return Local_u8_ErrorState;
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
        	}
     e5c:	26 96       	adiw	r28, 0x06	; 6
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <DIO_enu_SetPinValue>:

    ES_t DIO_enu_SetPinValue      (u8 Copy_u8_PortId,u8 Copy_u8_PinId,u8 Copy_u8_PinValue)
        {
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	2e 97       	sbiw	r28, 0x0e	; 14
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	6a 83       	std	Y+2, r22	; 0x02
     e86:	4b 83       	std	Y+3, r20	; 0x03
            if((Copy_u8_PortId <= DIO_u8_PORTD) && (Copy_u8_PinId <= DIO_u8_PIN7) && ((Copy_u8_PinValue == DIO_u8_HIGH)||(Copy_u8_PinValue == DIO_u8_LOW))){
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <DIO_enu_SetPinValue+0x22>
     e8e:	0d c1       	rjmp	.+538    	; 0x10aa <DIO_enu_SetPinValue+0x23c>
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	88 30       	cpi	r24, 0x08	; 8
     e94:	08 f0       	brcs	.+2      	; 0xe98 <DIO_enu_SetPinValue+0x2a>
     e96:	09 c1       	rjmp	.+530    	; 0x10aa <DIO_enu_SetPinValue+0x23c>
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	21 f0       	breq	.+8      	; 0xea6 <DIO_enu_SetPinValue+0x38>
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	88 23       	and	r24, r24
     ea2:	09 f0       	breq	.+2      	; 0xea6 <DIO_enu_SetPinValue+0x38>
     ea4:	02 c1       	rjmp	.+516    	; 0x10aa <DIO_enu_SetPinValue+0x23c>
                switch (Copy_u8_PortId)
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	3e 87       	std	Y+14, r19	; 0x0e
     eae:	2d 87       	std	Y+13, r18	; 0x0d
     eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	91 05       	cpc	r25, r1
     eb8:	09 f4       	brne	.+2      	; 0xebc <DIO_enu_SetPinValue+0x4e>
     eba:	4f c0       	rjmp	.+158    	; 0xf5a <DIO_enu_SetPinValue+0xec>
     ebc:	2d 85       	ldd	r18, Y+13	; 0x0d
     ebe:	3e 85       	ldd	r19, Y+14	; 0x0e
     ec0:	22 30       	cpi	r18, 0x02	; 2
     ec2:	31 05       	cpc	r19, r1
     ec4:	2c f4       	brge	.+10     	; 0xed0 <DIO_enu_SetPinValue+0x62>
     ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	71 f0       	breq	.+28     	; 0xeea <DIO_enu_SetPinValue+0x7c>
     ece:	eb c0       	rjmp	.+470    	; 0x10a6 <DIO_enu_SetPinValue+0x238>
     ed0:	2d 85       	ldd	r18, Y+13	; 0x0d
     ed2:	3e 85       	ldd	r19, Y+14	; 0x0e
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <DIO_enu_SetPinValue+0x6e>
     eda:	77 c0       	rjmp	.+238    	; 0xfca <DIO_enu_SetPinValue+0x15c>
     edc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ede:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	91 05       	cpc	r25, r1
     ee4:	09 f4       	brne	.+2      	; 0xee8 <DIO_enu_SetPinValue+0x7a>
     ee6:	a9 c0       	rjmp	.+338    	; 0x103a <DIO_enu_SetPinValue+0x1cc>
     ee8:	de c0       	rjmp	.+444    	; 0x10a6 <DIO_enu_SetPinValue+0x238>
                {
                case DIO_u8_PORTA:
                    switch (Copy_u8_PinValue)
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	3c 87       	std	Y+12, r19	; 0x0c
     ef2:	2b 87       	std	Y+11, r18	; 0x0b
     ef4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ef6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	d1 f0       	breq	.+52     	; 0xf30 <DIO_enu_SetPinValue+0xc2>
     efc:	2b 85       	ldd	r18, Y+11	; 0x0b
     efe:	3c 85       	ldd	r19, Y+12	; 0x0c
     f00:	21 30       	cpi	r18, 0x01	; 1
     f02:	31 05       	cpc	r19, r1
     f04:	09 f0       	breq	.+2      	; 0xf08 <DIO_enu_SetPinValue+0x9a>
     f06:	cf c0       	rjmp	.+414    	; 0x10a6 <DIO_enu_SetPinValue+0x238>
                    {
                        case DIO_u8_HIGH:BIT_SET(DIO_u8_PORTA_REG,Copy_u8_PinId); break;
     f08:	ab e3       	ldi	r26, 0x3B	; 59
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	eb e3       	ldi	r30, 0x3B	; 59
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_enu_SetPinValue+0xb8>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_enu_SetPinValue+0xb4>
     f2a:	84 2b       	or	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	bb c0       	rjmp	.+374    	; 0x10a6 <DIO_enu_SetPinValue+0x238>
                        case DIO_u8_LOW : BIT_CLR(DIO_u8_PORTA_REG,Copy_u8_PinId); break;
     f30:	ab e3       	ldi	r26, 0x3B	; 59
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	eb e3       	ldi	r30, 0x3B	; 59
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_enu_SetPinValue+0xe0>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_enu_SetPinValue+0xdc>
     f52:	80 95       	com	r24
     f54:	84 23       	and	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	a6 c0       	rjmp	.+332    	; 0x10a6 <DIO_enu_SetPinValue+0x238>
                    }
                break;
                case DIO_u8_PORTB:
                    switch (Copy_u8_PinValue)
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3a 87       	std	Y+10, r19	; 0x0a
     f62:	29 87       	std	Y+9, r18	; 0x09
     f64:	89 85       	ldd	r24, Y+9	; 0x09
     f66:	9a 85       	ldd	r25, Y+10	; 0x0a
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	d1 f0       	breq	.+52     	; 0xfa0 <DIO_enu_SetPinValue+0x132>
     f6c:	29 85       	ldd	r18, Y+9	; 0x09
     f6e:	3a 85       	ldd	r19, Y+10	; 0x0a
     f70:	21 30       	cpi	r18, 0x01	; 1
     f72:	31 05       	cpc	r19, r1
     f74:	09 f0       	breq	.+2      	; 0xf78 <DIO_enu_SetPinValue+0x10a>
     f76:	97 c0       	rjmp	.+302    	; 0x10a6 <DIO_enu_SetPinValue+0x238>
                    {
                        case DIO_u8_HIGH:BIT_SET(DIO_u8_PORTB_REG,Copy_u8_PinId); break;
     f78:	a8 e3       	ldi	r26, 0x38	; 56
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e8 e3       	ldi	r30, 0x38	; 56
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_enu_SetPinValue+0x128>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_enu_SetPinValue+0x124>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	83 c0       	rjmp	.+262    	; 0x10a6 <DIO_enu_SetPinValue+0x238>
                        case DIO_u8_LOW : BIT_CLR(DIO_u8_PORTB_REG,Copy_u8_PinId); break;
     fa0:	a8 e3       	ldi	r26, 0x38	; 56
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e8 e3       	ldi	r30, 0x38	; 56
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_enu_SetPinValue+0x150>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_enu_SetPinValue+0x14c>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	6e c0       	rjmp	.+220    	; 0x10a6 <DIO_enu_SetPinValue+0x238>
                    }
                break;
                case DIO_u8_PORTC:
                    switch (Copy_u8_PinValue)
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	38 87       	std	Y+8, r19	; 0x08
     fd2:	2f 83       	std	Y+7, r18	; 0x07
     fd4:	8f 81       	ldd	r24, Y+7	; 0x07
     fd6:	98 85       	ldd	r25, Y+8	; 0x08
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	d1 f0       	breq	.+52     	; 0x1010 <DIO_enu_SetPinValue+0x1a2>
     fdc:	2f 81       	ldd	r18, Y+7	; 0x07
     fde:	38 85       	ldd	r19, Y+8	; 0x08
     fe0:	21 30       	cpi	r18, 0x01	; 1
     fe2:	31 05       	cpc	r19, r1
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <DIO_enu_SetPinValue+0x17a>
     fe6:	5f c0       	rjmp	.+190    	; 0x10a6 <DIO_enu_SetPinValue+0x238>
                    {
                        case DIO_u8_HIGH:BIT_SET(DIO_u8_PORTC_REG,Copy_u8_PinId); break;
     fe8:	a5 e3       	ldi	r26, 0x35	; 53
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e5 e3       	ldi	r30, 0x35	; 53
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_enu_SetPinValue+0x198>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_enu_SetPinValue+0x194>
    100a:	84 2b       	or	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	4b c0       	rjmp	.+150    	; 0x10a6 <DIO_enu_SetPinValue+0x238>
                        case DIO_u8_LOW : BIT_CLR(DIO_u8_PORTC_REG,Copy_u8_PinId); break;
    1010:	a5 e3       	ldi	r26, 0x35	; 53
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e5 e3       	ldi	r30, 0x35	; 53
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_enu_SetPinValue+0x1c0>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_enu_SetPinValue+0x1bc>
    1032:	80 95       	com	r24
    1034:	84 23       	and	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	36 c0       	rjmp	.+108    	; 0x10a6 <DIO_enu_SetPinValue+0x238>
                    } 
                break;
                case DIO_u8_PORTD:
                    switch (Copy_u8_PinValue)
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	3e 83       	std	Y+6, r19	; 0x06
    1042:	2d 83       	std	Y+5, r18	; 0x05
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	c9 f0       	breq	.+50     	; 0x107e <DIO_enu_SetPinValue+0x210>
    104c:	2d 81       	ldd	r18, Y+5	; 0x05
    104e:	3e 81       	ldd	r19, Y+6	; 0x06
    1050:	21 30       	cpi	r18, 0x01	; 1
    1052:	31 05       	cpc	r19, r1
    1054:	41 f5       	brne	.+80     	; 0x10a6 <DIO_enu_SetPinValue+0x238>
                    {
                        case DIO_u8_HIGH:BIT_SET(DIO_u8_PORTD_REG,Copy_u8_PinId); break;
    1056:	a2 e3       	ldi	r26, 0x32	; 50
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e2 e3       	ldi	r30, 0x32	; 50
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_enu_SetPinValue+0x206>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_enu_SetPinValue+0x202>
    1078:	84 2b       	or	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	14 c0       	rjmp	.+40     	; 0x10a6 <DIO_enu_SetPinValue+0x238>
                        case DIO_u8_LOW : BIT_CLR(DIO_u8_PORTD_REG,Copy_u8_PinId); break;
    107e:	a2 e3       	ldi	r26, 0x32	; 50
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e2 e3       	ldi	r30, 0x32	; 50
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 2e       	mov	r0, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_enu_SetPinValue+0x22e>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	0a 94       	dec	r0
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_enu_SetPinValue+0x22a>
    10a0:	80 95       	com	r24
    10a2:	84 23       	and	r24, r20
    10a4:	8c 93       	st	X, r24
            }
            else
            {
            	return STD_TYPES_NOK;
            }
          return STD_TYPES_OK;
    10a6:	1c 82       	std	Y+4, r1	; 0x04
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_enu_SetPinValue+0x240>
                break;
                }
            }
            else
            {
            	return STD_TYPES_NOK;
    10aa:	31 e0       	ldi	r19, 0x01	; 1
    10ac:	3c 83       	std	Y+4, r19	; 0x04
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
            }
          return STD_TYPES_OK;

        }
    10b0:	2e 96       	adiw	r28, 0x0e	; 14
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <DIO_enu_GetPinValue>:

    ES_t DIO_enu_GetPinValue      (u8 Copy_u8_PortId,u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue)
        {
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	28 97       	sbiw	r28, 0x08	; 8
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	8a 83       	std	Y+2, r24	; 0x02
    10d8:	6b 83       	std	Y+3, r22	; 0x03
    10da:	5d 83       	std	Y+5, r21	; 0x05
    10dc:	4c 83       	std	Y+4, r20	; 0x04
            u8 Local_u8_PinValue ;
            if((Copy_u8_PortId <= DIO_u8_PORTD) && (Copy_u8_PinId <= DIO_u8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	84 30       	cpi	r24, 0x04	; 4
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <DIO_enu_GetPinValue+0x24>
    10e4:	9f c0       	rjmp	.+318    	; 0x1224 <DIO_enu_GetPinValue+0x162>
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 30       	cpi	r24, 0x08	; 8
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <DIO_enu_GetPinValue+0x2c>
    10ec:	9b c0       	rjmp	.+310    	; 0x1224 <DIO_enu_GetPinValue+0x162>
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	9d 81       	ldd	r25, Y+5	; 0x05
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <DIO_enu_GetPinValue+0x36>
    10f6:	96 c0       	rjmp	.+300    	; 0x1224 <DIO_enu_GetPinValue+0x162>
            {
                switch (Copy_u8_PortId)
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	38 87       	std	Y+8, r19	; 0x08
    1100:	2f 83       	std	Y+7, r18	; 0x07
    1102:	8f 81       	ldd	r24, Y+7	; 0x07
    1104:	98 85       	ldd	r25, Y+8	; 0x08
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	91 05       	cpc	r25, r1
    110a:	a1 f1       	breq	.+104    	; 0x1174 <DIO_enu_GetPinValue+0xb2>
    110c:	2f 81       	ldd	r18, Y+7	; 0x07
    110e:	38 85       	ldd	r19, Y+8	; 0x08
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	2c f4       	brge	.+10     	; 0x1120 <DIO_enu_GetPinValue+0x5e>
    1116:	8f 81       	ldd	r24, Y+7	; 0x07
    1118:	98 85       	ldd	r25, Y+8	; 0x08
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	71 f0       	breq	.+28     	; 0x113a <DIO_enu_GetPinValue+0x78>
    111e:	80 c0       	rjmp	.+256    	; 0x1220 <DIO_enu_GetPinValue+0x15e>
    1120:	2f 81       	ldd	r18, Y+7	; 0x07
    1122:	38 85       	ldd	r19, Y+8	; 0x08
    1124:	22 30       	cpi	r18, 0x02	; 2
    1126:	31 05       	cpc	r19, r1
    1128:	09 f4       	brne	.+2      	; 0x112c <DIO_enu_GetPinValue+0x6a>
    112a:	41 c0       	rjmp	.+130    	; 0x11ae <DIO_enu_GetPinValue+0xec>
    112c:	8f 81       	ldd	r24, Y+7	; 0x07
    112e:	98 85       	ldd	r25, Y+8	; 0x08
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	91 05       	cpc	r25, r1
    1134:	09 f4       	brne	.+2      	; 0x1138 <DIO_enu_GetPinValue+0x76>
    1136:	58 c0       	rjmp	.+176    	; 0x11e8 <DIO_enu_GetPinValue+0x126>
    1138:	73 c0       	rjmp	.+230    	; 0x1220 <DIO_enu_GetPinValue+0x15e>
                {
                    case DIO_u8_PORTA:		Local_u8_PinValue = BIT_GET(DIO_u8_PINA_REG,Copy_u8_PinId);
    113a:	e9 e3       	ldi	r30, 0x39	; 57
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_enu_GetPinValue+0x92>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_enu_GetPinValue+0x8e>
    1158:	84 23       	and	r24, r20
    115a:	89 83       	std	Y+1, r24	; 0x01
											if(Local_u8_PinValue == STD_TYPES_OK) {*Copy_pu8_ReturnPinValue = DIO_u8_LOW;}
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	88 23       	and	r24, r24
    1160:	21 f4       	brne	.+8      	; 0x116a <DIO_enu_GetPinValue+0xa8>
    1162:	ec 81       	ldd	r30, Y+4	; 0x04
    1164:	fd 81       	ldd	r31, Y+5	; 0x05
    1166:	10 82       	st	Z, r1
    1168:	5b c0       	rjmp	.+182    	; 0x1220 <DIO_enu_GetPinValue+0x15e>
											else {*Copy_pu8_ReturnPinValue = DIO_u8_HIGH;}
    116a:	ec 81       	ldd	r30, Y+4	; 0x04
    116c:	fd 81       	ldd	r31, Y+5	; 0x05
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	80 83       	st	Z, r24
    1172:	56 c0       	rjmp	.+172    	; 0x1220 <DIO_enu_GetPinValue+0x15e>
                    break;
                    case DIO_u8_PORTB:      Local_u8_PinValue = BIT_GET(DIO_u8_PINB_REG,Copy_u8_PinId);
    1174:	e6 e3       	ldi	r30, 0x36	; 54
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_enu_GetPinValue+0xcc>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_enu_GetPinValue+0xc8>
    1192:	84 23       	and	r24, r20
    1194:	89 83       	std	Y+1, r24	; 0x01
											if(Local_u8_PinValue == STD_TYPES_OK) {*Copy_pu8_ReturnPinValue = DIO_u8_LOW;}
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	88 23       	and	r24, r24
    119a:	21 f4       	brne	.+8      	; 0x11a4 <DIO_enu_GetPinValue+0xe2>
    119c:	ec 81       	ldd	r30, Y+4	; 0x04
    119e:	fd 81       	ldd	r31, Y+5	; 0x05
    11a0:	10 82       	st	Z, r1
    11a2:	3e c0       	rjmp	.+124    	; 0x1220 <DIO_enu_GetPinValue+0x15e>
											else {*Copy_pu8_ReturnPinValue = DIO_u8_HIGH;}
    11a4:	ec 81       	ldd	r30, Y+4	; 0x04
    11a6:	fd 81       	ldd	r31, Y+5	; 0x05
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	80 83       	st	Z, r24
    11ac:	39 c0       	rjmp	.+114    	; 0x1220 <DIO_enu_GetPinValue+0x15e>
					break;
                    case DIO_u8_PORTC:      Local_u8_PinValue = BIT_GET(DIO_u8_PINC_REG,Copy_u8_PinId);
    11ae:	e3 e3       	ldi	r30, 0x33	; 51
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_enu_GetPinValue+0x106>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_enu_GetPinValue+0x102>
    11cc:	84 23       	and	r24, r20
    11ce:	89 83       	std	Y+1, r24	; 0x01
											if(Local_u8_PinValue == STD_TYPES_OK) {*Copy_pu8_ReturnPinValue = DIO_u8_LOW;}
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	88 23       	and	r24, r24
    11d4:	21 f4       	brne	.+8      	; 0x11de <DIO_enu_GetPinValue+0x11c>
    11d6:	ec 81       	ldd	r30, Y+4	; 0x04
    11d8:	fd 81       	ldd	r31, Y+5	; 0x05
    11da:	10 82       	st	Z, r1
    11dc:	21 c0       	rjmp	.+66     	; 0x1220 <DIO_enu_GetPinValue+0x15e>
											else {*Copy_pu8_ReturnPinValue = DIO_u8_HIGH;}
    11de:	ec 81       	ldd	r30, Y+4	; 0x04
    11e0:	fd 81       	ldd	r31, Y+5	; 0x05
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 83       	st	Z, r24
    11e6:	1c c0       	rjmp	.+56     	; 0x1220 <DIO_enu_GetPinValue+0x15e>
					break;
                    case DIO_u8_PORTD:      Local_u8_PinValue = BIT_GET(DIO_u8_PIND_REG,Copy_u8_PinId);
    11e8:	e0 e3       	ldi	r30, 0x30	; 48
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_enu_GetPinValue+0x140>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_enu_GetPinValue+0x13c>
    1206:	84 23       	and	r24, r20
    1208:	89 83       	std	Y+1, r24	; 0x01
											if(Local_u8_PinValue == STD_TYPES_OK) {*Copy_pu8_ReturnPinValue = DIO_u8_LOW;}
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	88 23       	and	r24, r24
    120e:	21 f4       	brne	.+8      	; 0x1218 <DIO_enu_GetPinValue+0x156>
    1210:	ec 81       	ldd	r30, Y+4	; 0x04
    1212:	fd 81       	ldd	r31, Y+5	; 0x05
    1214:	10 82       	st	Z, r1
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <DIO_enu_GetPinValue+0x15e>
											else {*Copy_pu8_ReturnPinValue = DIO_u8_HIGH;}
    1218:	ec 81       	ldd	r30, Y+4	; 0x04
    121a:	fd 81       	ldd	r31, Y+5	; 0x05
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 83       	st	Z, r24
            }
            else
            {
                return STD_TYPES_NOK;
            }
            return STD_TYPES_OK;
    1220:	1e 82       	std	Y+6, r1	; 0x06
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_enu_GetPinValue+0x166>
					break;
                }
            }
            else
            {
                return STD_TYPES_NOK;
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	9e 83       	std	Y+6, r25	; 0x06
    1228:	8e 81       	ldd	r24, Y+6	; 0x06
            }
            return STD_TYPES_OK;

        }
    122a:	28 96       	adiw	r28, 0x08	; 8
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <DIO_enu_GetPinDir>:

    ES_t DIO_enu_GetPinDir        (u8 Copy_u8_PortId,u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinDirection)
    {
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	28 97       	sbiw	r28, 0x08	; 8
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	8a 83       	std	Y+2, r24	; 0x02
    1252:	6b 83       	std	Y+3, r22	; 0x03
    1254:	5d 83       	std	Y+5, r21	; 0x05
    1256:	4c 83       	std	Y+4, r20	; 0x04
            u8 Local_u8_PinDirection;
            if((Copy_u8_PortId <= DIO_u8_PORTD) && (Copy_u8_PinId <= DIO_u8_PIN7) && (Copy_pu8_ReturnPinDirection != NULL))
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	08 f0       	brcs	.+2      	; 0x1260 <DIO_enu_GetPinDir+0x24>
    125e:	9f c0       	rjmp	.+318    	; 0x139e <DIO_enu_GetPinDir+0x162>
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	88 30       	cpi	r24, 0x08	; 8
    1264:	08 f0       	brcs	.+2      	; 0x1268 <DIO_enu_GetPinDir+0x2c>
    1266:	9b c0       	rjmp	.+310    	; 0x139e <DIO_enu_GetPinDir+0x162>
    1268:	8c 81       	ldd	r24, Y+4	; 0x04
    126a:	9d 81       	ldd	r25, Y+5	; 0x05
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	09 f4       	brne	.+2      	; 0x1272 <DIO_enu_GetPinDir+0x36>
    1270:	96 c0       	rjmp	.+300    	; 0x139e <DIO_enu_GetPinDir+0x162>
            {
                switch (Copy_u8_PortId)
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	38 87       	std	Y+8, r19	; 0x08
    127a:	2f 83       	std	Y+7, r18	; 0x07
    127c:	8f 81       	ldd	r24, Y+7	; 0x07
    127e:	98 85       	ldd	r25, Y+8	; 0x08
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	a1 f1       	breq	.+104    	; 0x12ee <DIO_enu_GetPinDir+0xb2>
    1286:	2f 81       	ldd	r18, Y+7	; 0x07
    1288:	38 85       	ldd	r19, Y+8	; 0x08
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	2c f4       	brge	.+10     	; 0x129a <DIO_enu_GetPinDir+0x5e>
    1290:	8f 81       	ldd	r24, Y+7	; 0x07
    1292:	98 85       	ldd	r25, Y+8	; 0x08
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	71 f0       	breq	.+28     	; 0x12b4 <DIO_enu_GetPinDir+0x78>
    1298:	80 c0       	rjmp	.+256    	; 0x139a <DIO_enu_GetPinDir+0x15e>
    129a:	2f 81       	ldd	r18, Y+7	; 0x07
    129c:	38 85       	ldd	r19, Y+8	; 0x08
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <DIO_enu_GetPinDir+0x6a>
    12a4:	41 c0       	rjmp	.+130    	; 0x1328 <DIO_enu_GetPinDir+0xec>
    12a6:	8f 81       	ldd	r24, Y+7	; 0x07
    12a8:	98 85       	ldd	r25, Y+8	; 0x08
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	91 05       	cpc	r25, r1
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <DIO_enu_GetPinDir+0x76>
    12b0:	58 c0       	rjmp	.+176    	; 0x1362 <DIO_enu_GetPinDir+0x126>
    12b2:	73 c0       	rjmp	.+230    	; 0x139a <DIO_enu_GetPinDir+0x15e>
                {
                    case DIO_u8_PORTA:		Local_u8_PinDirection = BIT_GET(DIO_u8_PINA_REG,Copy_u8_PinId);
    12b4:	e9 e3       	ldi	r30, 0x39	; 57
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_enu_GetPinDir+0x92>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_enu_GetPinDir+0x8e>
    12d2:	84 23       	and	r24, r20
    12d4:	89 83       	std	Y+1, r24	; 0x01
											if(Local_u8_PinDirection == STD_TYPES_OK) {*Copy_pu8_ReturnPinDirection = DIO_u8_INPUT;}
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	88 23       	and	r24, r24
    12da:	21 f4       	brne	.+8      	; 0x12e4 <DIO_enu_GetPinDir+0xa8>
    12dc:	ec 81       	ldd	r30, Y+4	; 0x04
    12de:	fd 81       	ldd	r31, Y+5	; 0x05
    12e0:	10 82       	st	Z, r1
    12e2:	5b c0       	rjmp	.+182    	; 0x139a <DIO_enu_GetPinDir+0x15e>
											else {*Copy_pu8_ReturnPinDirection = DIO_u8_OUTPUT;}
    12e4:	ec 81       	ldd	r30, Y+4	; 0x04
    12e6:	fd 81       	ldd	r31, Y+5	; 0x05
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 83       	st	Z, r24
    12ec:	56 c0       	rjmp	.+172    	; 0x139a <DIO_enu_GetPinDir+0x15e>
                    break;
                    case DIO_u8_PORTB:      Local_u8_PinDirection = BIT_GET(DIO_u8_PINB_REG,Copy_u8_PinId);
    12ee:	e6 e3       	ldi	r30, 0x36	; 54
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_enu_GetPinDir+0xcc>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_enu_GetPinDir+0xc8>
    130c:	84 23       	and	r24, r20
    130e:	89 83       	std	Y+1, r24	; 0x01
											if(Local_u8_PinDirection == STD_TYPES_OK) {*Copy_pu8_ReturnPinDirection = DIO_u8_INPUT;}
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	88 23       	and	r24, r24
    1314:	21 f4       	brne	.+8      	; 0x131e <DIO_enu_GetPinDir+0xe2>
    1316:	ec 81       	ldd	r30, Y+4	; 0x04
    1318:	fd 81       	ldd	r31, Y+5	; 0x05
    131a:	10 82       	st	Z, r1
    131c:	3e c0       	rjmp	.+124    	; 0x139a <DIO_enu_GetPinDir+0x15e>
											else {*Copy_pu8_ReturnPinDirection = DIO_u8_OUTPUT;}
    131e:	ec 81       	ldd	r30, Y+4	; 0x04
    1320:	fd 81       	ldd	r31, Y+5	; 0x05
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	80 83       	st	Z, r24
    1326:	39 c0       	rjmp	.+114    	; 0x139a <DIO_enu_GetPinDir+0x15e>
					break;
                    case DIO_u8_PORTC:      Local_u8_PinDirection = BIT_GET(DIO_u8_PINC_REG,Copy_u8_PinId);
    1328:	e3 e3       	ldi	r30, 0x33	; 51
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_enu_GetPinDir+0x106>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_enu_GetPinDir+0x102>
    1346:	84 23       	and	r24, r20
    1348:	89 83       	std	Y+1, r24	; 0x01
											if(Local_u8_PinDirection == STD_TYPES_OK) {*Copy_pu8_ReturnPinDirection = DIO_u8_INPUT;}
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	88 23       	and	r24, r24
    134e:	21 f4       	brne	.+8      	; 0x1358 <DIO_enu_GetPinDir+0x11c>
    1350:	ec 81       	ldd	r30, Y+4	; 0x04
    1352:	fd 81       	ldd	r31, Y+5	; 0x05
    1354:	10 82       	st	Z, r1
    1356:	21 c0       	rjmp	.+66     	; 0x139a <DIO_enu_GetPinDir+0x15e>
											else {*Copy_pu8_ReturnPinDirection = DIO_u8_OUTPUT;}
    1358:	ec 81       	ldd	r30, Y+4	; 0x04
    135a:	fd 81       	ldd	r31, Y+5	; 0x05
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	80 83       	st	Z, r24
    1360:	1c c0       	rjmp	.+56     	; 0x139a <DIO_enu_GetPinDir+0x15e>
					break;
                    case DIO_u8_PORTD:      Local_u8_PinDirection = BIT_GET(DIO_u8_PIND_REG,Copy_u8_PinId);
    1362:	e0 e3       	ldi	r30, 0x30	; 48
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_enu_GetPinDir+0x140>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_enu_GetPinDir+0x13c>
    1380:	84 23       	and	r24, r20
    1382:	89 83       	std	Y+1, r24	; 0x01
											if(Local_u8_PinDirection == STD_TYPES_OK) {*Copy_pu8_ReturnPinDirection = DIO_u8_INPUT;}
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	88 23       	and	r24, r24
    1388:	21 f4       	brne	.+8      	; 0x1392 <DIO_enu_GetPinDir+0x156>
    138a:	ec 81       	ldd	r30, Y+4	; 0x04
    138c:	fd 81       	ldd	r31, Y+5	; 0x05
    138e:	10 82       	st	Z, r1
    1390:	04 c0       	rjmp	.+8      	; 0x139a <DIO_enu_GetPinDir+0x15e>
											else {*Copy_pu8_ReturnPinDirection = DIO_u8_OUTPUT;}
    1392:	ec 81       	ldd	r30, Y+4	; 0x04
    1394:	fd 81       	ldd	r31, Y+5	; 0x05
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	80 83       	st	Z, r24
            }
            else
            {
                return STD_TYPES_NOK;
            }
            return STD_TYPES_OK;
    139a:	1e 82       	std	Y+6, r1	; 0x06
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_enu_GetPinDir+0x166>
					break;
                }
            }
            else
            {
                return STD_TYPES_NOK;
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8e 81       	ldd	r24, Y+6	; 0x06
            }
            return STD_TYPES_OK;
    }
    13a4:	28 96       	adiw	r28, 0x08	; 8
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <DIO_enu_SetPortDirection>:

    ES_t DIO_enu_SetPortDirection (u8 Copy_u8_PortId,u8 Copy_u8_PortDirection)
        {
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	2d 97       	sbiw	r28, 0x0d	; 13
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	6a 83       	std	Y+2, r22	; 0x02
            if((Copy_u8_PortId <= DIO_u8_PORTD) &&((Copy_u8_PortDirection == DIO_u8_OUTPUT)||(Copy_u8_PortDirection == DIO_u8_INPUT))){
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	84 30       	cpi	r24, 0x04	; 4
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <DIO_enu_SetPortDirection+0x20>
    13d4:	85 c0       	rjmp	.+266    	; 0x14e0 <DIO_enu_SetPortDirection+0x12a>
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	21 f0       	breq	.+8      	; 0x13e4 <DIO_enu_SetPortDirection+0x2e>
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	88 23       	and	r24, r24
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <DIO_enu_SetPortDirection+0x2e>
    13e2:	7e c0       	rjmp	.+252    	; 0x14e0 <DIO_enu_SetPortDirection+0x12a>
                switch (Copy_u8_PortId)
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	3d 87       	std	Y+13, r19	; 0x0d
    13ec:	2c 87       	std	Y+12, r18	; 0x0c
    13ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    13f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	91 05       	cpc	r25, r1
    13f6:	71 f1       	breq	.+92     	; 0x1454 <DIO_enu_SetPortDirection+0x9e>
    13f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    13fa:	3d 85       	ldd	r19, Y+13	; 0x0d
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	2c f4       	brge	.+10     	; 0x140c <DIO_enu_SetPortDirection+0x56>
    1402:	8c 85       	ldd	r24, Y+12	; 0x0c
    1404:	9d 85       	ldd	r25, Y+13	; 0x0d
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	69 f0       	breq	.+26     	; 0x1424 <DIO_enu_SetPortDirection+0x6e>
    140a:	68 c0       	rjmp	.+208    	; 0x14dc <DIO_enu_SetPortDirection+0x126>
    140c:	2c 85       	ldd	r18, Y+12	; 0x0c
    140e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	b1 f1       	breq	.+108    	; 0x1482 <DIO_enu_SetPortDirection+0xcc>
    1416:	8c 85       	ldd	r24, Y+12	; 0x0c
    1418:	9d 85       	ldd	r25, Y+13	; 0x0d
    141a:	83 30       	cpi	r24, 0x03	; 3
    141c:	91 05       	cpc	r25, r1
    141e:	09 f4       	brne	.+2      	; 0x1422 <DIO_enu_SetPortDirection+0x6c>
    1420:	47 c0       	rjmp	.+142    	; 0x14b0 <DIO_enu_SetPortDirection+0xfa>
    1422:	5c c0       	rjmp	.+184    	; 0x14dc <DIO_enu_SetPortDirection+0x126>
                {
                case DIO_u8_PORTA:
                    switch (Copy_u8_PortDirection)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	3b 87       	std	Y+11, r19	; 0x0b
    142c:	2a 87       	std	Y+10, r18	; 0x0a
    142e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1430:	9b 85       	ldd	r25, Y+11	; 0x0b
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	59 f0       	breq	.+22     	; 0x144c <DIO_enu_SetPortDirection+0x96>
    1436:	2a 85       	ldd	r18, Y+10	; 0x0a
    1438:	3b 85       	ldd	r19, Y+11	; 0x0b
    143a:	21 30       	cpi	r18, 0x01	; 1
    143c:	31 05       	cpc	r19, r1
    143e:	09 f0       	breq	.+2      	; 0x1442 <DIO_enu_SetPortDirection+0x8c>
    1440:	4d c0       	rjmp	.+154    	; 0x14dc <DIO_enu_SetPortDirection+0x126>
                    {
                    case DIO_u8_OUTPUT: DIO_u8_DDRA_REG = 0xff; break;
    1442:	ea e3       	ldi	r30, 0x3A	; 58
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	80 83       	st	Z, r24
    144a:	48 c0       	rjmp	.+144    	; 0x14dc <DIO_enu_SetPortDirection+0x126>
                    case DIO_u8_INPUT : DIO_u8_DDRA_REG = 0x00; break;
    144c:	ea e3       	ldi	r30, 0x3A	; 58
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	10 82       	st	Z, r1
    1452:	44 c0       	rjmp	.+136    	; 0x14dc <DIO_enu_SetPortDirection+0x126>
                    }
                break;
                case DIO_u8_PORTB:
                    switch (Copy_u8_PortDirection)
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	39 87       	std	Y+9, r19	; 0x09
    145c:	28 87       	std	Y+8, r18	; 0x08
    145e:	88 85       	ldd	r24, Y+8	; 0x08
    1460:	99 85       	ldd	r25, Y+9	; 0x09
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	51 f0       	breq	.+20     	; 0x147a <DIO_enu_SetPortDirection+0xc4>
    1466:	28 85       	ldd	r18, Y+8	; 0x08
    1468:	39 85       	ldd	r19, Y+9	; 0x09
    146a:	21 30       	cpi	r18, 0x01	; 1
    146c:	31 05       	cpc	r19, r1
    146e:	b1 f5       	brne	.+108    	; 0x14dc <DIO_enu_SetPortDirection+0x126>
                        {
                        case DIO_u8_OUTPUT: DIO_u8_DDRB_REG = 0xff; break;
    1470:	e7 e3       	ldi	r30, 0x37	; 55
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8f ef       	ldi	r24, 0xFF	; 255
    1476:	80 83       	st	Z, r24
    1478:	31 c0       	rjmp	.+98     	; 0x14dc <DIO_enu_SetPortDirection+0x126>
                        case DIO_u8_INPUT : DIO_u8_DDRB_REG = 0x00; break;
    147a:	e7 e3       	ldi	r30, 0x37	; 55
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	10 82       	st	Z, r1
    1480:	2d c0       	rjmp	.+90     	; 0x14dc <DIO_enu_SetPortDirection+0x126>
                        }
                break;
                case DIO_u8_PORTC:
                    switch (Copy_u8_PortDirection)
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	3f 83       	std	Y+7, r19	; 0x07
    148a:	2e 83       	std	Y+6, r18	; 0x06
    148c:	8e 81       	ldd	r24, Y+6	; 0x06
    148e:	9f 81       	ldd	r25, Y+7	; 0x07
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	51 f0       	breq	.+20     	; 0x14a8 <DIO_enu_SetPortDirection+0xf2>
    1494:	2e 81       	ldd	r18, Y+6	; 0x06
    1496:	3f 81       	ldd	r19, Y+7	; 0x07
    1498:	21 30       	cpi	r18, 0x01	; 1
    149a:	31 05       	cpc	r19, r1
    149c:	f9 f4       	brne	.+62     	; 0x14dc <DIO_enu_SetPortDirection+0x126>
                        {
                        case DIO_u8_OUTPUT: DIO_u8_DDRC_REG = 0xff; break;
    149e:	e4 e3       	ldi	r30, 0x34	; 52
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	80 83       	st	Z, r24
    14a6:	1a c0       	rjmp	.+52     	; 0x14dc <DIO_enu_SetPortDirection+0x126>
                        case DIO_u8_INPUT : DIO_u8_DDRC_REG = 0x00; break;
    14a8:	e4 e3       	ldi	r30, 0x34	; 52
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	10 82       	st	Z, r1
    14ae:	16 c0       	rjmp	.+44     	; 0x14dc <DIO_enu_SetPortDirection+0x126>
                        }
                break;
                case DIO_u8_PORTD:
                    switch (Copy_u8_PortDirection)
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3d 83       	std	Y+5, r19	; 0x05
    14b8:	2c 83       	std	Y+4, r18	; 0x04
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	9d 81       	ldd	r25, Y+5	; 0x05
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	51 f0       	breq	.+20     	; 0x14d6 <DIO_enu_SetPortDirection+0x120>
    14c2:	2c 81       	ldd	r18, Y+4	; 0x04
    14c4:	3d 81       	ldd	r19, Y+5	; 0x05
    14c6:	21 30       	cpi	r18, 0x01	; 1
    14c8:	31 05       	cpc	r19, r1
    14ca:	41 f4       	brne	.+16     	; 0x14dc <DIO_enu_SetPortDirection+0x126>
                        {
                        case DIO_u8_OUTPUT: DIO_u8_DDRD_REG = 0xff; break;
    14cc:	e1 e3       	ldi	r30, 0x31	; 49
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	80 83       	st	Z, r24
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <DIO_enu_SetPortDirection+0x126>
                        case DIO_u8_INPUT : DIO_u8_DDRD_REG = 0x00; break;
    14d6:	e1 e3       	ldi	r30, 0x31	; 49
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	10 82       	st	Z, r1
                break;
                }
            }else{
                return STD_TYPES_NOK;
            	}
            return STD_TYPES_OK;
    14dc:	1b 82       	std	Y+3, r1	; 0x03
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_enu_SetPortDirection+0x12e>
                        case DIO_u8_INPUT : DIO_u8_DDRD_REG = 0x00; break;
                        }
                break;
                }
            }else{
                return STD_TYPES_NOK;
    14e0:	31 e0       	ldi	r19, 0x01	; 1
    14e2:	3b 83       	std	Y+3, r19	; 0x03
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
            	}
            return STD_TYPES_OK;
        }
    14e6:	2d 96       	adiw	r28, 0x0d	; 13
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <DIO_enu_SetPortValue>:

    ES_t DIO_enu_SetPortValue     (u8 Copy_u8_PortId,u8 Copy_u8_PortValue)
        {
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	2d 97       	sbiw	r28, 0x0d	; 13
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	6a 83       	std	Y+2, r22	; 0x02
            if((Copy_u8_PortId <= DIO_u8_PORTD) &&((Copy_u8_PortValue == DIO_u8_HIGH)||(Copy_u8_PortValue == DIO_u8_LOW))){
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	84 30       	cpi	r24, 0x04	; 4
    1514:	08 f0       	brcs	.+2      	; 0x1518 <DIO_enu_SetPortValue+0x20>
    1516:	85 c0       	rjmp	.+266    	; 0x1622 <DIO_enu_SetPortValue+0x12a>
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	21 f0       	breq	.+8      	; 0x1526 <DIO_enu_SetPortValue+0x2e>
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	88 23       	and	r24, r24
    1522:	09 f0       	breq	.+2      	; 0x1526 <DIO_enu_SetPortValue+0x2e>
    1524:	7e c0       	rjmp	.+252    	; 0x1622 <DIO_enu_SetPortValue+0x12a>
                switch (Copy_u8_PortId)
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	3d 87       	std	Y+13, r19	; 0x0d
    152e:	2c 87       	std	Y+12, r18	; 0x0c
    1530:	8c 85       	ldd	r24, Y+12	; 0x0c
    1532:	9d 85       	ldd	r25, Y+13	; 0x0d
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	71 f1       	breq	.+92     	; 0x1596 <DIO_enu_SetPortValue+0x9e>
    153a:	2c 85       	ldd	r18, Y+12	; 0x0c
    153c:	3d 85       	ldd	r19, Y+13	; 0x0d
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	2c f4       	brge	.+10     	; 0x154e <DIO_enu_SetPortValue+0x56>
    1544:	8c 85       	ldd	r24, Y+12	; 0x0c
    1546:	9d 85       	ldd	r25, Y+13	; 0x0d
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	69 f0       	breq	.+26     	; 0x1566 <DIO_enu_SetPortValue+0x6e>
    154c:	68 c0       	rjmp	.+208    	; 0x161e <DIO_enu_SetPortValue+0x126>
    154e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1550:	3d 85       	ldd	r19, Y+13	; 0x0d
    1552:	22 30       	cpi	r18, 0x02	; 2
    1554:	31 05       	cpc	r19, r1
    1556:	b1 f1       	breq	.+108    	; 0x15c4 <DIO_enu_SetPortValue+0xcc>
    1558:	8c 85       	ldd	r24, Y+12	; 0x0c
    155a:	9d 85       	ldd	r25, Y+13	; 0x0d
    155c:	83 30       	cpi	r24, 0x03	; 3
    155e:	91 05       	cpc	r25, r1
    1560:	09 f4       	brne	.+2      	; 0x1564 <DIO_enu_SetPortValue+0x6c>
    1562:	47 c0       	rjmp	.+142    	; 0x15f2 <DIO_enu_SetPortValue+0xfa>
    1564:	5c c0       	rjmp	.+184    	; 0x161e <DIO_enu_SetPortValue+0x126>
                {
                case DIO_u8_PORTA:
                    switch (Copy_u8_PortValue)
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3b 87       	std	Y+11, r19	; 0x0b
    156e:	2a 87       	std	Y+10, r18	; 0x0a
    1570:	8a 85       	ldd	r24, Y+10	; 0x0a
    1572:	9b 85       	ldd	r25, Y+11	; 0x0b
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	59 f0       	breq	.+22     	; 0x158e <DIO_enu_SetPortValue+0x96>
    1578:	2a 85       	ldd	r18, Y+10	; 0x0a
    157a:	3b 85       	ldd	r19, Y+11	; 0x0b
    157c:	21 30       	cpi	r18, 0x01	; 1
    157e:	31 05       	cpc	r19, r1
    1580:	09 f0       	breq	.+2      	; 0x1584 <DIO_enu_SetPortValue+0x8c>
    1582:	4d c0       	rjmp	.+154    	; 0x161e <DIO_enu_SetPortValue+0x126>
                        {
                        case DIO_u8_HIGH: DIO_u8_PORTA_REG = 0xff; break;
    1584:	eb e3       	ldi	r30, 0x3B	; 59
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	8f ef       	ldi	r24, 0xFF	; 255
    158a:	80 83       	st	Z, r24
    158c:	48 c0       	rjmp	.+144    	; 0x161e <DIO_enu_SetPortValue+0x126>
                        case DIO_u8_LOW : DIO_u8_PORTA_REG = 0x00; break;
    158e:	eb e3       	ldi	r30, 0x3B	; 59
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	10 82       	st	Z, r1
    1594:	44 c0       	rjmp	.+136    	; 0x161e <DIO_enu_SetPortValue+0x126>
                        }
                break;
                case DIO_u8_PORTB:
                    switch (Copy_u8_PortValue)
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	39 87       	std	Y+9, r19	; 0x09
    159e:	28 87       	std	Y+8, r18	; 0x08
    15a0:	88 85       	ldd	r24, Y+8	; 0x08
    15a2:	99 85       	ldd	r25, Y+9	; 0x09
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	51 f0       	breq	.+20     	; 0x15bc <DIO_enu_SetPortValue+0xc4>
    15a8:	28 85       	ldd	r18, Y+8	; 0x08
    15aa:	39 85       	ldd	r19, Y+9	; 0x09
    15ac:	21 30       	cpi	r18, 0x01	; 1
    15ae:	31 05       	cpc	r19, r1
    15b0:	b1 f5       	brne	.+108    	; 0x161e <DIO_enu_SetPortValue+0x126>
                        {
                        case DIO_u8_HIGH: DIO_u8_PORTB_REG = 0xff; break;
    15b2:	e8 e3       	ldi	r30, 0x38	; 56
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8f ef       	ldi	r24, 0xFF	; 255
    15b8:	80 83       	st	Z, r24
    15ba:	31 c0       	rjmp	.+98     	; 0x161e <DIO_enu_SetPortValue+0x126>
                        case DIO_u8_LOW : DIO_u8_PORTB_REG = 0x00; break;
    15bc:	e8 e3       	ldi	r30, 0x38	; 56
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	10 82       	st	Z, r1
    15c2:	2d c0       	rjmp	.+90     	; 0x161e <DIO_enu_SetPortValue+0x126>
                        }
                break;
                case DIO_u8_PORTC:
                    switch (Copy_u8_PortValue)
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3f 83       	std	Y+7, r19	; 0x07
    15cc:	2e 83       	std	Y+6, r18	; 0x06
    15ce:	8e 81       	ldd	r24, Y+6	; 0x06
    15d0:	9f 81       	ldd	r25, Y+7	; 0x07
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	51 f0       	breq	.+20     	; 0x15ea <DIO_enu_SetPortValue+0xf2>
    15d6:	2e 81       	ldd	r18, Y+6	; 0x06
    15d8:	3f 81       	ldd	r19, Y+7	; 0x07
    15da:	21 30       	cpi	r18, 0x01	; 1
    15dc:	31 05       	cpc	r19, r1
    15de:	f9 f4       	brne	.+62     	; 0x161e <DIO_enu_SetPortValue+0x126>
                        {
                        case DIO_u8_HIGH: DIO_u8_PORTC_REG = 0xff; break;
    15e0:	e5 e3       	ldi	r30, 0x35	; 53
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	8f ef       	ldi	r24, 0xFF	; 255
    15e6:	80 83       	st	Z, r24
    15e8:	1a c0       	rjmp	.+52     	; 0x161e <DIO_enu_SetPortValue+0x126>
                        case DIO_u8_LOW : DIO_u8_PORTC_REG = 0x00; break;
    15ea:	e5 e3       	ldi	r30, 0x35	; 53
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	10 82       	st	Z, r1
    15f0:	16 c0       	rjmp	.+44     	; 0x161e <DIO_enu_SetPortValue+0x126>
                        }
                break;
                case DIO_u8_PORTD:
                    switch (Copy_u8_PortValue)
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	3d 83       	std	Y+5, r19	; 0x05
    15fa:	2c 83       	std	Y+4, r18	; 0x04
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	51 f0       	breq	.+20     	; 0x1618 <DIO_enu_SetPortValue+0x120>
    1604:	2c 81       	ldd	r18, Y+4	; 0x04
    1606:	3d 81       	ldd	r19, Y+5	; 0x05
    1608:	21 30       	cpi	r18, 0x01	; 1
    160a:	31 05       	cpc	r19, r1
    160c:	41 f4       	brne	.+16     	; 0x161e <DIO_enu_SetPortValue+0x126>
                        {
                        case DIO_u8_HIGH: DIO_u8_PORTD_REG = 0xff; break;
    160e:	e2 e3       	ldi	r30, 0x32	; 50
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8f ef       	ldi	r24, 0xFF	; 255
    1614:	80 83       	st	Z, r24
    1616:	03 c0       	rjmp	.+6      	; 0x161e <DIO_enu_SetPortValue+0x126>
                        case DIO_u8_LOW : DIO_u8_PORTD_REG = 0x00; break;
    1618:	e2 e3       	ldi	r30, 0x32	; 50
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	10 82       	st	Z, r1
                break;
                }
            }else{
                return STD_TYPES_NOK;
            }
            return STD_TYPES_OK;
    161e:	1b 82       	std	Y+3, r1	; 0x03
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_enu_SetPortValue+0x12e>
                        case DIO_u8_LOW : DIO_u8_PORTD_REG = 0x00; break;
                        }
                break;
                }
            }else{
                return STD_TYPES_NOK;
    1622:	31 e0       	ldi	r19, 0x01	; 1
    1624:	3b 83       	std	Y+3, r19	; 0x03
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
            }
            return STD_TYPES_OK;
        }
    1628:	2d 96       	adiw	r28, 0x0d	; 13
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <DIO_enu_GetPortValue>:

    ES_t DIO_enu_GetPortValue     (u8 Copy_u8_PortId,u8 * Copy_pu8_ReturnPortValue)
        {
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	00 d0       	rcall	.+0      	; 0x1640 <DIO_enu_GetPortValue+0x6>
    1640:	00 d0       	rcall	.+0      	; 0x1642 <DIO_enu_GetPortValue+0x8>
    1642:	00 d0       	rcall	.+0      	; 0x1644 <DIO_enu_GetPortValue+0xa>
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	7b 83       	std	Y+3, r23	; 0x03
    164c:	6a 83       	std	Y+2, r22	; 0x02
            if((Copy_u8_PortId<= DIO_u8_PORTD) && (Copy_pu8_ReturnPortValue != NULL)){
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	84 30       	cpi	r24, 0x04	; 4
    1652:	08 f0       	brcs	.+2      	; 0x1656 <DIO_enu_GetPortValue+0x1c>
    1654:	40 c0       	rjmp	.+128    	; 0x16d6 <DIO_enu_GetPortValue+0x9c>
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	9b 81       	ldd	r25, Y+3	; 0x03
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	e1 f1       	breq	.+120    	; 0x16d6 <DIO_enu_GetPortValue+0x9c>
                switch (Copy_u8_PortId)
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3e 83       	std	Y+6, r19	; 0x06
    1666:	2d 83       	std	Y+5, r18	; 0x05
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	91 05       	cpc	r25, r1
    1670:	e1 f0       	breq	.+56     	; 0x16aa <DIO_enu_GetPortValue+0x70>
    1672:	2d 81       	ldd	r18, Y+5	; 0x05
    1674:	3e 81       	ldd	r19, Y+6	; 0x06
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	2c f4       	brge	.+10     	; 0x1686 <DIO_enu_GetPortValue+0x4c>
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	61 f0       	breq	.+24     	; 0x169c <DIO_enu_GetPortValue+0x62>
    1684:	26 c0       	rjmp	.+76     	; 0x16d2 <DIO_enu_GetPortValue+0x98>
    1686:	2d 81       	ldd	r18, Y+5	; 0x05
    1688:	3e 81       	ldd	r19, Y+6	; 0x06
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	a1 f0       	breq	.+40     	; 0x16b8 <DIO_enu_GetPortValue+0x7e>
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	91 05       	cpc	r25, r1
    1698:	b1 f0       	breq	.+44     	; 0x16c6 <DIO_enu_GetPortValue+0x8c>
    169a:	1b c0       	rjmp	.+54     	; 0x16d2 <DIO_enu_GetPortValue+0x98>
                {
                case DIO_u8_PORTA: *Copy_pu8_ReturnPortValue = DIO_u8_PINA_REG;break;
    169c:	e9 e3       	ldi	r30, 0x39	; 57
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	ea 81       	ldd	r30, Y+2	; 0x02
    16a4:	fb 81       	ldd	r31, Y+3	; 0x03
    16a6:	80 83       	st	Z, r24
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <DIO_enu_GetPortValue+0x98>
                case DIO_u8_PORTB: *Copy_pu8_ReturnPortValue = DIO_u8_PINB_REG;break;
    16aa:	e6 e3       	ldi	r30, 0x36	; 54
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	ea 81       	ldd	r30, Y+2	; 0x02
    16b2:	fb 81       	ldd	r31, Y+3	; 0x03
    16b4:	80 83       	st	Z, r24
    16b6:	0d c0       	rjmp	.+26     	; 0x16d2 <DIO_enu_GetPortValue+0x98>
                case DIO_u8_PORTC: *Copy_pu8_ReturnPortValue = DIO_u8_PINC_REG;break;
    16b8:	e3 e3       	ldi	r30, 0x33	; 51
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	ea 81       	ldd	r30, Y+2	; 0x02
    16c0:	fb 81       	ldd	r31, Y+3	; 0x03
    16c2:	80 83       	st	Z, r24
    16c4:	06 c0       	rjmp	.+12     	; 0x16d2 <DIO_enu_GetPortValue+0x98>
                case DIO_u8_PORTD: *Copy_pu8_ReturnPortValue = DIO_u8_PIND_REG;break;
    16c6:	e0 e3       	ldi	r30, 0x30	; 48
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	ea 81       	ldd	r30, Y+2	; 0x02
    16ce:	fb 81       	ldd	r31, Y+3	; 0x03
    16d0:	80 83       	st	Z, r24
                }
            }
            else{
                return STD_TYPES_NOK;
            }
            return STD_TYPES_OK;
    16d2:	1c 82       	std	Y+4, r1	; 0x04
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_enu_GetPortValue+0xa0>
                case DIO_u8_PORTC: *Copy_pu8_ReturnPortValue = DIO_u8_PINC_REG;break;
                case DIO_u8_PORTD: *Copy_pu8_ReturnPortValue = DIO_u8_PIND_REG;break;
                }
            }
            else{
                return STD_TYPES_NOK;
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	8c 81       	ldd	r24, Y+4	; 0x04
            }
            return STD_TYPES_OK;

        }
    16dc:	26 96       	adiw	r28, 0x06	; 6
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <LCD_enu_SendCommand>:

#define F_CPU 1000000UL


ES_t LCD_enu_SendCommand  (u8 Copy_u8_command)
 {
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	69 97       	sbiw	r28, 0x19	; 25
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	89 8f       	std	Y+25, r24	; 0x19

	/*RS=0*/
	DIO_enu_SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_enu_SetPinValue>
	/*RW=0*/
	DIO_enu_SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_enu_SetPinValue>

	DIO_enu_SetPortValue(LCD_u8_DATA_PORT,Copy_u8_command);
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	69 8d       	ldd	r22, Y+25	; 0x19
    171c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enu_SetPortValue>
	/*Sending enable signal*/
	DIO_enu_SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	62 e0       	ldi	r22, 0x02	; 2
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_enu_SetPinValue>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a0 e8       	ldi	r26, 0x80	; 128
    1730:	bf e3       	ldi	r27, 0x3F	; 63
    1732:	8d 8b       	std	Y+21, r24	; 0x15
    1734:	9e 8b       	std	Y+22, r25	; 0x16
    1736:	af 8b       	std	Y+23, r26	; 0x17
    1738:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    173a:	6d 89       	ldd	r22, Y+21	; 0x15
    173c:	7e 89       	ldd	r23, Y+22	; 0x16
    173e:	8f 89       	ldd	r24, Y+23	; 0x17
    1740:	98 8d       	ldd	r25, Y+24	; 0x18
    1742:	2b ea       	ldi	r18, 0xAB	; 171
    1744:	3a ea       	ldi	r19, 0xAA	; 170
    1746:	4a ea       	ldi	r20, 0xAA	; 170
    1748:	5e e3       	ldi	r21, 0x3E	; 62
    174a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	89 8b       	std	Y+17, r24	; 0x11
    1754:	9a 8b       	std	Y+18, r25	; 0x12
    1756:	ab 8b       	std	Y+19, r26	; 0x13
    1758:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    175a:	69 89       	ldd	r22, Y+17	; 0x11
    175c:	7a 89       	ldd	r23, Y+18	; 0x12
    175e:	8b 89       	ldd	r24, Y+19	; 0x13
    1760:	9c 89       	ldd	r25, Y+20	; 0x14
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e8       	ldi	r20, 0x80	; 128
    1768:	5f e3       	ldi	r21, 0x3F	; 63
    176a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    176e:	88 23       	and	r24, r24
    1770:	1c f4       	brge	.+6      	; 0x1778 <LCD_enu_SendCommand+0x8a>
		__ticks = 1;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	88 8b       	std	Y+16, r24	; 0x10
    1776:	91 c0       	rjmp	.+290    	; 0x189a <LCD_enu_SendCommand+0x1ac>
	else if (__tmp > 255)
    1778:	69 89       	ldd	r22, Y+17	; 0x11
    177a:	7a 89       	ldd	r23, Y+18	; 0x12
    177c:	8b 89       	ldd	r24, Y+19	; 0x13
    177e:	9c 89       	ldd	r25, Y+20	; 0x14
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4f e7       	ldi	r20, 0x7F	; 127
    1786:	53 e4       	ldi	r21, 0x43	; 67
    1788:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    178c:	18 16       	cp	r1, r24
    178e:	0c f0       	brlt	.+2      	; 0x1792 <LCD_enu_SendCommand+0xa4>
    1790:	7b c0       	rjmp	.+246    	; 0x1888 <LCD_enu_SendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1792:	6d 89       	ldd	r22, Y+21	; 0x15
    1794:	7e 89       	ldd	r23, Y+22	; 0x16
    1796:	8f 89       	ldd	r24, Y+23	; 0x17
    1798:	98 8d       	ldd	r25, Y+24	; 0x18
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4a e7       	ldi	r20, 0x7A	; 122
    17a0:	54 e4       	ldi	r21, 0x44	; 68
    17a2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	8c 87       	std	Y+12, r24	; 0x0c
    17ac:	9d 87       	std	Y+13, r25	; 0x0d
    17ae:	ae 87       	std	Y+14, r26	; 0x0e
    17b0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    17b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    17b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    17b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	4a e7       	ldi	r20, 0x7A	; 122
    17c0:	53 e4       	ldi	r21, 0x43	; 67
    17c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	88 87       	std	Y+8, r24	; 0x08
    17cc:	99 87       	std	Y+9, r25	; 0x09
    17ce:	aa 87       	std	Y+10, r26	; 0x0a
    17d0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    17d2:	68 85       	ldd	r22, Y+8	; 0x08
    17d4:	79 85       	ldd	r23, Y+9	; 0x09
    17d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    17d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e8       	ldi	r20, 0x80	; 128
    17e0:	5f e3       	ldi	r21, 0x3F	; 63
    17e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17e6:	88 23       	and	r24, r24
    17e8:	2c f4       	brge	.+10     	; 0x17f4 <LCD_enu_SendCommand+0x106>
		__ticks = 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	9f 83       	std	Y+7, r25	; 0x07
    17f0:	8e 83       	std	Y+6, r24	; 0x06
    17f2:	3f c0       	rjmp	.+126    	; 0x1872 <LCD_enu_SendCommand+0x184>
	else if (__tmp > 65535)
    17f4:	68 85       	ldd	r22, Y+8	; 0x08
    17f6:	79 85       	ldd	r23, Y+9	; 0x09
    17f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	3f ef       	ldi	r19, 0xFF	; 255
    1800:	4f e7       	ldi	r20, 0x7F	; 127
    1802:	57 e4       	ldi	r21, 0x47	; 71
    1804:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1808:	18 16       	cp	r1, r24
    180a:	4c f5       	brge	.+82     	; 0x185e <LCD_enu_SendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    180c:	6c 85       	ldd	r22, Y+12	; 0x0c
    180e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1810:	8e 85       	ldd	r24, Y+14	; 0x0e
    1812:	9f 85       	ldd	r25, Y+15	; 0x0f
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e2       	ldi	r20, 0x20	; 32
    181a:	51 e4       	ldi	r21, 0x41	; 65
    181c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	bc 01       	movw	r22, r24
    1826:	cd 01       	movw	r24, r26
    1828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9f 83       	std	Y+7, r25	; 0x07
    1832:	8e 83       	std	Y+6, r24	; 0x06
    1834:	0f c0       	rjmp	.+30     	; 0x1854 <LCD_enu_SendCommand+0x166>
    1836:	89 e1       	ldi	r24, 0x19	; 25
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	9d 83       	std	Y+5, r25	; 0x05
    183c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	9d 81       	ldd	r25, Y+5	; 0x05
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <LCD_enu_SendCommand+0x154>
    1846:	9d 83       	std	Y+5, r25	; 0x05
    1848:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184a:	8e 81       	ldd	r24, Y+6	; 0x06
    184c:	9f 81       	ldd	r25, Y+7	; 0x07
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	9f 83       	std	Y+7, r25	; 0x07
    1852:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1854:	8e 81       	ldd	r24, Y+6	; 0x06
    1856:	9f 81       	ldd	r25, Y+7	; 0x07
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	69 f7       	brne	.-38     	; 0x1836 <LCD_enu_SendCommand+0x148>
    185c:	24 c0       	rjmp	.+72     	; 0x18a6 <LCD_enu_SendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    185e:	68 85       	ldd	r22, Y+8	; 0x08
    1860:	79 85       	ldd	r23, Y+9	; 0x09
    1862:	8a 85       	ldd	r24, Y+10	; 0x0a
    1864:	9b 85       	ldd	r25, Y+11	; 0x0b
    1866:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9f 83       	std	Y+7, r25	; 0x07
    1870:	8e 83       	std	Y+6, r24	; 0x06
    1872:	8e 81       	ldd	r24, Y+6	; 0x06
    1874:	9f 81       	ldd	r25, Y+7	; 0x07
    1876:	9b 83       	std	Y+3, r25	; 0x03
    1878:	8a 83       	std	Y+2, r24	; 0x02
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	9b 81       	ldd	r25, Y+3	; 0x03
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <LCD_enu_SendCommand+0x190>
    1882:	9b 83       	std	Y+3, r25	; 0x03
    1884:	8a 83       	std	Y+2, r24	; 0x02
    1886:	0f c0       	rjmp	.+30     	; 0x18a6 <LCD_enu_SendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1888:	69 89       	ldd	r22, Y+17	; 0x11
    188a:	7a 89       	ldd	r23, Y+18	; 0x12
    188c:	8b 89       	ldd	r24, Y+19	; 0x13
    188e:	9c 89       	ldd	r25, Y+20	; 0x14
    1890:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	88 8b       	std	Y+16, r24	; 0x10
    189a:	88 89       	ldd	r24, Y+16	; 0x10
    189c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	8a 95       	dec	r24
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <LCD_enu_SendCommand+0x1b2>
    18a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_enu_SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	62 e0       	ldi	r22, 0x02	; 2
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_enu_SetPinValue>
	//_delay_us(200);

	return STD_TYPES_OK;
    18b0:	80 e0       	ldi	r24, 0x00	; 0
}
    18b2:	69 96       	adiw	r28, 0x19	; 25
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <LCD_enu_Init>:


ES_t LCD_enu_Init(void)
 {
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	cc 54       	subi	r28, 0x4C	; 76
    18d2:	d0 40       	sbci	r29, 0x00	; 0
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61

/*Directions of Rs-Rw-E*/
	DIO_enu_SetPinDirection(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_INITIAL_OUTPUT);
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_enu_SetPinDirection>
	DIO_enu_SetPinDirection(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_INITIAL_OUTPUT);
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	61 e0       	ldi	r22, 0x01	; 1
    18ec:	41 e0       	ldi	r20, 0x01	; 1
    18ee:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_enu_SetPinDirection>
	DIO_enu_SetPinDirection(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_INITIAL_OUTPUT);
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	62 e0       	ldi	r22, 0x02	; 2
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 67 06 	call	0xcce	; 0xcce <DIO_enu_SetPinDirection>
	DIO_enu_SetPortDirection(LCD_u8_DATA_PORT,DIO_u8_INITIAL_OUTPUT);
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	0e 94 db 09 	call	0x13b6	; 0x13b6 <DIO_enu_SetPortDirection>

	DIO_enu_SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_OUTPUT_LOW);
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_enu_SetPinValue>
	DIO_enu_SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_OUTPUT_LOW);
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_enu_SetPinValue>
	DIO_enu_SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_OUTPUT_LOW);
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	62 e0       	ldi	r22, 0x02	; 2
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_enu_SetPinValue>
	DIO_enu_SetPortValue(LCD_u8_DATA_PORT,DIO_u8_OUTPUT_LOW);
    1922:	83 e0       	ldi	r24, 0x03	; 3
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enu_SetPortValue>
    192a:	fe 01       	movw	r30, r28
    192c:	e7 5b       	subi	r30, 0xB7	; 183
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	ac e0       	ldi	r26, 0x0C	; 12
    1936:	b2 e4       	ldi	r27, 0x42	; 66
    1938:	80 83       	st	Z, r24
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	a2 83       	std	Z+2, r26	; 0x02
    193e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	8e 01       	movw	r16, r28
    1942:	0b 5b       	subi	r16, 0xBB	; 187
    1944:	1f 4f       	sbci	r17, 0xFF	; 255
    1946:	fe 01       	movw	r30, r28
    1948:	e7 5b       	subi	r30, 0xB7	; 183
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	60 81       	ld	r22, Z
    194e:	71 81       	ldd	r23, Z+1	; 0x01
    1950:	82 81       	ldd	r24, Z+2	; 0x02
    1952:	93 81       	ldd	r25, Z+3	; 0x03
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	4a e7       	ldi	r20, 0x7A	; 122
    195a:	53 e4       	ldi	r21, 0x43	; 67
    195c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	f8 01       	movw	r30, r16
    1966:	80 83       	st	Z, r24
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	a2 83       	std	Z+2, r26	; 0x02
    196c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    196e:	fe 01       	movw	r30, r28
    1970:	eb 5b       	subi	r30, 0xBB	; 187
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e8       	ldi	r20, 0x80	; 128
    1982:	5f e3       	ldi	r21, 0x3F	; 63
    1984:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1988:	88 23       	and	r24, r24
    198a:	44 f4       	brge	.+16     	; 0x199c <LCD_enu_Init+0xd8>
		__ticks = 1;
    198c:	fe 01       	movw	r30, r28
    198e:	ed 5b       	subi	r30, 0xBD	; 189
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	80 83       	st	Z, r24
    199a:	64 c0       	rjmp	.+200    	; 0x1a64 <LCD_enu_Init+0x1a0>
	else if (__tmp > 65535)
    199c:	fe 01       	movw	r30, r28
    199e:	eb 5b       	subi	r30, 0xBB	; 187
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	0c f0       	brlt	.+2      	; 0x19bc <LCD_enu_Init+0xf8>
    19ba:	43 c0       	rjmp	.+134    	; 0x1a42 <LCD_enu_Init+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19bc:	fe 01       	movw	r30, r28
    19be:	e7 5b       	subi	r30, 0xB7	; 183
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	60 81       	ld	r22, Z
    19c4:	71 81       	ldd	r23, Z+1	; 0x01
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	8e 01       	movw	r16, r28
    19dc:	0d 5b       	subi	r16, 0xBD	; 189
    19de:	1f 4f       	sbci	r17, 0xFF	; 255
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	f8 01       	movw	r30, r16
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
    19f2:	1f c0       	rjmp	.+62     	; 0x1a32 <LCD_enu_Init+0x16e>
    19f4:	fe 01       	movw	r30, r28
    19f6:	ef 5b       	subi	r30, 0xBF	; 191
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	89 e1       	ldi	r24, 0x19	; 25
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a02:	fe 01       	movw	r30, r28
    1a04:	ef 5b       	subi	r30, 0xBF	; 191
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_enu_Init+0x148>
    1a10:	fe 01       	movw	r30, r28
    1a12:	ef 5b       	subi	r30, 0xBF	; 191
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1a:	de 01       	movw	r26, r28
    1a1c:	ad 5b       	subi	r26, 0xBD	; 189
    1a1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a20:	fe 01       	movw	r30, r28
    1a22:	ed 5b       	subi	r30, 0xBD	; 189
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	91 81       	ldd	r25, Z+1	; 0x01
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	11 96       	adiw	r26, 0x01	; 1
    1a2e:	9c 93       	st	X, r25
    1a30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a32:	fe 01       	movw	r30, r28
    1a34:	ed 5b       	subi	r30, 0xBD	; 189
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	80 81       	ld	r24, Z
    1a3a:	91 81       	ldd	r25, Z+1	; 0x01
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	d1 f6       	brne	.-76     	; 0x19f4 <LCD_enu_Init+0x130>
    1a40:	24 c0       	rjmp	.+72     	; 0x1a8a <LCD_enu_Init+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a42:	8e 01       	movw	r16, r28
    1a44:	0d 5b       	subi	r16, 0xBD	; 189
    1a46:	1f 4f       	sbci	r17, 0xFF	; 255
    1a48:	fe 01       	movw	r30, r28
    1a4a:	eb 5b       	subi	r30, 0xBB	; 187
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	60 81       	ld	r22, Z
    1a50:	71 81       	ldd	r23, Z+1	; 0x01
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	93 81       	ldd	r25, Z+3	; 0x03
    1a56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	f8 01       	movw	r30, r16
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	80 83       	st	Z, r24
    1a64:	fe 01       	movw	r30, r28
    1a66:	ed 5b       	subi	r30, 0xBD	; 189
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ff 96       	adiw	r30, 0x3f	; 63
    1a72:	91 83       	std	Z+1, r25	; 0x01
    1a74:	80 83       	st	Z, r24
    1a76:	fe 01       	movw	r30, r28
    1a78:	ff 96       	adiw	r30, 0x3f	; 63
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_enu_Init+0x1ba>
    1a82:	fe 01       	movw	r30, r28
    1a84:	ff 96       	adiw	r30, 0x3f	; 63
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	80 83       	st	Z, r24

	_delay_ms(35);

	LCD_enu_SendCommand(LCD_FUNCTION_SET); /*Function Set*/
    1a8a:	88 e3       	ldi	r24, 0x38	; 56
    1a8c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_enu_SendCommand>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e2       	ldi	r26, 0x20	; 32
    1a96:	b2 e4       	ldi	r27, 0x42	; 66
    1a98:	8b af       	std	Y+59, r24	; 0x3b
    1a9a:	9c af       	std	Y+60, r25	; 0x3c
    1a9c:	ad af       	std	Y+61, r26	; 0x3d
    1a9e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aa0:	6b ad       	ldd	r22, Y+59	; 0x3b
    1aa2:	7c ad       	ldd	r23, Y+60	; 0x3c
    1aa4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aa6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aa8:	2b ea       	ldi	r18, 0xAB	; 171
    1aaa:	3a ea       	ldi	r19, 0xAA	; 170
    1aac:	4a ea       	ldi	r20, 0xAA	; 170
    1aae:	5e e3       	ldi	r21, 0x3E	; 62
    1ab0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	8f ab       	std	Y+55, r24	; 0x37
    1aba:	98 af       	std	Y+56, r25	; 0x38
    1abc:	a9 af       	std	Y+57, r26	; 0x39
    1abe:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1ac0:	6f a9       	ldd	r22, Y+55	; 0x37
    1ac2:	78 ad       	ldd	r23, Y+56	; 0x38
    1ac4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ac6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	1c f4       	brge	.+6      	; 0x1ade <LCD_enu_Init+0x21a>
		__ticks = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	8e ab       	std	Y+54, r24	; 0x36
    1adc:	91 c0       	rjmp	.+290    	; 0x1c00 <LCD_enu_Init+0x33c>
	else if (__tmp > 255)
    1ade:	6f a9       	ldd	r22, Y+55	; 0x37
    1ae0:	78 ad       	ldd	r23, Y+56	; 0x38
    1ae2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ae4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	53 e4       	ldi	r21, 0x43	; 67
    1aee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	0c f0       	brlt	.+2      	; 0x1af8 <LCD_enu_Init+0x234>
    1af6:	7b c0       	rjmp	.+246    	; 0x1bee <LCD_enu_Init+0x32a>
	{
		_delay_ms(__us / 1000.0);
    1af8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1afa:	7c ad       	ldd	r23, Y+60	; 0x3c
    1afc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1afe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a e7       	ldi	r20, 0x7A	; 122
    1b06:	54 e4       	ldi	r21, 0x44	; 68
    1b08:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8a ab       	std	Y+50, r24	; 0x32
    1b12:	9b ab       	std	Y+51, r25	; 0x33
    1b14:	ac ab       	std	Y+52, r26	; 0x34
    1b16:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	6a a9       	ldd	r22, Y+50	; 0x32
    1b1a:	7b a9       	ldd	r23, Y+51	; 0x33
    1b1c:	8c a9       	ldd	r24, Y+52	; 0x34
    1b1e:	9d a9       	ldd	r25, Y+53	; 0x35
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a e7       	ldi	r20, 0x7A	; 122
    1b26:	53 e4       	ldi	r21, 0x43	; 67
    1b28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	8e a7       	std	Y+46, r24	; 0x2e
    1b32:	9f a7       	std	Y+47, r25	; 0x2f
    1b34:	a8 ab       	std	Y+48, r26	; 0x30
    1b36:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1b38:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b3a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b3c:	88 a9       	ldd	r24, Y+48	; 0x30
    1b3e:	99 a9       	ldd	r25, Y+49	; 0x31
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <LCD_enu_Init+0x296>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9d a7       	std	Y+45, r25	; 0x2d
    1b56:	8c a7       	std	Y+44, r24	; 0x2c
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <LCD_enu_Init+0x314>
	else if (__tmp > 65535)
    1b5a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b5c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b5e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b60:	99 a9       	ldd	r25, Y+49	; 0x31
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <LCD_enu_Init+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	6a a9       	ldd	r22, Y+50	; 0x32
    1b74:	7b a9       	ldd	r23, Y+51	; 0x33
    1b76:	8c a9       	ldd	r24, Y+52	; 0x34
    1b78:	9d a9       	ldd	r25, Y+53	; 0x35
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9d a7       	std	Y+45, r25	; 0x2d
    1b98:	8c a7       	std	Y+44, r24	; 0x2c
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <LCD_enu_Init+0x2f6>
    1b9c:	89 e1       	ldi	r24, 0x19	; 25
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9b a7       	std	Y+43, r25	; 0x2b
    1ba2:	8a a7       	std	Y+42, r24	; 0x2a
    1ba4:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ba6:	9b a5       	ldd	r25, Y+43	; 0x2b
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_enu_Init+0x2e4>
    1bac:	9b a7       	std	Y+43, r25	; 0x2b
    1bae:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bb2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9d a7       	std	Y+45, r25	; 0x2d
    1bb8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bbc:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <LCD_enu_Init+0x2d8>
    1bc2:	24 c0       	rjmp	.+72     	; 0x1c0c <LCD_enu_Init+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bc6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bc8:	88 a9       	ldd	r24, Y+48	; 0x30
    1bca:	99 a9       	ldd	r25, Y+49	; 0x31
    1bcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9d a7       	std	Y+45, r25	; 0x2d
    1bd6:	8c a7       	std	Y+44, r24	; 0x2c
    1bd8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bda:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bdc:	99 a7       	std	Y+41, r25	; 0x29
    1bde:	88 a7       	std	Y+40, r24	; 0x28
    1be0:	88 a5       	ldd	r24, Y+40	; 0x28
    1be2:	99 a5       	ldd	r25, Y+41	; 0x29
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_enu_Init+0x320>
    1be8:	99 a7       	std	Y+41, r25	; 0x29
    1bea:	88 a7       	std	Y+40, r24	; 0x28
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <LCD_enu_Init+0x348>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bee:	6f a9       	ldd	r22, Y+55	; 0x37
    1bf0:	78 ad       	ldd	r23, Y+56	; 0x38
    1bf2:	89 ad       	ldd	r24, Y+57	; 0x39
    1bf4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8e ab       	std	Y+54, r24	; 0x36
    1c00:	8e a9       	ldd	r24, Y+54	; 0x36
    1c02:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c04:	8f a1       	ldd	r24, Y+39	; 0x27
    1c06:	8a 95       	dec	r24
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <LCD_enu_Init+0x342>
    1c0a:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);

	LCD_enu_SendCommand(LCD_DISPLAY_CONTROL);
    1c0c:	8c e0       	ldi	r24, 0x0C	; 12
    1c0e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_enu_SendCommand>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a0 e2       	ldi	r26, 0x20	; 32
    1c18:	b2 e4       	ldi	r27, 0x42	; 66
    1c1a:	8b a3       	std	Y+35, r24	; 0x23
    1c1c:	9c a3       	std	Y+36, r25	; 0x24
    1c1e:	ad a3       	std	Y+37, r26	; 0x25
    1c20:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c22:	6b a1       	ldd	r22, Y+35	; 0x23
    1c24:	7c a1       	ldd	r23, Y+36	; 0x24
    1c26:	8d a1       	ldd	r24, Y+37	; 0x25
    1c28:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2a:	2b ea       	ldi	r18, 0xAB	; 171
    1c2c:	3a ea       	ldi	r19, 0xAA	; 170
    1c2e:	4a ea       	ldi	r20, 0xAA	; 170
    1c30:	5e e3       	ldi	r21, 0x3E	; 62
    1c32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c3c:	98 a3       	std	Y+32, r25	; 0x20
    1c3e:	a9 a3       	std	Y+33, r26	; 0x21
    1c40:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1c42:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c44:	78 a1       	ldd	r23, Y+32	; 0x20
    1c46:	89 a1       	ldd	r24, Y+33	; 0x21
    1c48:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e8       	ldi	r20, 0x80	; 128
    1c50:	5f e3       	ldi	r21, 0x3F	; 63
    1c52:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	1c f4       	brge	.+6      	; 0x1c60 <LCD_enu_Init+0x39c>
		__ticks = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	8e 8f       	std	Y+30, r24	; 0x1e
    1c5e:	91 c0       	rjmp	.+290    	; 0x1d82 <LCD_enu_Init+0x4be>
	else if (__tmp > 255)
    1c60:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c62:	78 a1       	ldd	r23, Y+32	; 0x20
    1c64:	89 a1       	ldd	r24, Y+33	; 0x21
    1c66:	9a a1       	ldd	r25, Y+34	; 0x22
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	4f e7       	ldi	r20, 0x7F	; 127
    1c6e:	53 e4       	ldi	r21, 0x43	; 67
    1c70:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c74:	18 16       	cp	r1, r24
    1c76:	0c f0       	brlt	.+2      	; 0x1c7a <LCD_enu_Init+0x3b6>
    1c78:	7b c0       	rjmp	.+246    	; 0x1d70 <LCD_enu_Init+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    1c7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c80:	9e a1       	ldd	r25, Y+38	; 0x26
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	4a e7       	ldi	r20, 0x7A	; 122
    1c88:	54 e4       	ldi	r21, 0x44	; 68
    1c8a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	8a 8f       	std	Y+26, r24	; 0x1a
    1c94:	9b 8f       	std	Y+27, r25	; 0x1b
    1c96:	ac 8f       	std	Y+28, r26	; 0x1c
    1c98:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c9c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ca0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4a e7       	ldi	r20, 0x7A	; 122
    1ca8:	53 e4       	ldi	r21, 0x43	; 67
    1caa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8e 8b       	std	Y+22, r24	; 0x16
    1cb4:	9f 8b       	std	Y+23, r25	; 0x17
    1cb6:	a8 8f       	std	Y+24, r26	; 0x18
    1cb8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1cba:	6e 89       	ldd	r22, Y+22	; 0x16
    1cbc:	7f 89       	ldd	r23, Y+23	; 0x17
    1cbe:	88 8d       	ldd	r24, Y+24	; 0x18
    1cc0:	99 8d       	ldd	r25, Y+25	; 0x19
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e8       	ldi	r20, 0x80	; 128
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <LCD_enu_Init+0x418>
		__ticks = 1;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9d 8b       	std	Y+21, r25	; 0x15
    1cd8:	8c 8b       	std	Y+20, r24	; 0x14
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <LCD_enu_Init+0x496>
	else if (__tmp > 65535)
    1cdc:	6e 89       	ldd	r22, Y+22	; 0x16
    1cde:	7f 89       	ldd	r23, Y+23	; 0x17
    1ce0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ce2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	4c f5       	brge	.+82     	; 0x1d46 <LCD_enu_Init+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1cf6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1cf8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e2       	ldi	r20, 0x20	; 32
    1d02:	51 e4       	ldi	r21, 0x41	; 65
    1d04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9d 8b       	std	Y+21, r25	; 0x15
    1d1a:	8c 8b       	std	Y+20, r24	; 0x14
    1d1c:	0f c0       	rjmp	.+30     	; 0x1d3c <LCD_enu_Init+0x478>
    1d1e:	89 e1       	ldi	r24, 0x19	; 25
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9b 8b       	std	Y+19, r25	; 0x13
    1d24:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d26:	8a 89       	ldd	r24, Y+18	; 0x12
    1d28:	9b 89       	ldd	r25, Y+19	; 0x13
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <LCD_enu_Init+0x466>
    1d2e:	9b 8b       	std	Y+19, r25	; 0x13
    1d30:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d32:	8c 89       	ldd	r24, Y+20	; 0x14
    1d34:	9d 89       	ldd	r25, Y+21	; 0x15
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	9d 8b       	std	Y+21, r25	; 0x15
    1d3a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3c:	8c 89       	ldd	r24, Y+20	; 0x14
    1d3e:	9d 89       	ldd	r25, Y+21	; 0x15
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	69 f7       	brne	.-38     	; 0x1d1e <LCD_enu_Init+0x45a>
    1d44:	24 c0       	rjmp	.+72     	; 0x1d8e <LCD_enu_Init+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	6e 89       	ldd	r22, Y+22	; 0x16
    1d48:	7f 89       	ldd	r23, Y+23	; 0x17
    1d4a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d4c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9d 8b       	std	Y+21, r25	; 0x15
    1d58:	8c 8b       	std	Y+20, r24	; 0x14
    1d5a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d5c:	9d 89       	ldd	r25, Y+21	; 0x15
    1d5e:	99 8b       	std	Y+17, r25	; 0x11
    1d60:	88 8b       	std	Y+16, r24	; 0x10
    1d62:	88 89       	ldd	r24, Y+16	; 0x10
    1d64:	99 89       	ldd	r25, Y+17	; 0x11
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_enu_Init+0x4a2>
    1d6a:	99 8b       	std	Y+17, r25	; 0x11
    1d6c:	88 8b       	std	Y+16, r24	; 0x10
    1d6e:	0f c0       	rjmp	.+30     	; 0x1d8e <LCD_enu_Init+0x4ca>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d70:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d72:	78 a1       	ldd	r23, Y+32	; 0x20
    1d74:	89 a1       	ldd	r24, Y+33	; 0x21
    1d76:	9a a1       	ldd	r25, Y+34	; 0x22
    1d78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	8e 8f       	std	Y+30, r24	; 0x1e
    1d82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d84:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d88:	8a 95       	dec	r24
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_enu_Init+0x4c4>
    1d8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);

	LCD_enu_SendCommand(LCD_CLEAR_SCREEN); /*Clear screen*/
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_enu_SendCommand>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	a0 e0       	ldi	r26, 0x00	; 0
    1d9a:	b0 e4       	ldi	r27, 0x40	; 64
    1d9c:	8b 87       	std	Y+11, r24	; 0x0b
    1d9e:	9c 87       	std	Y+12, r25	; 0x0c
    1da0:	ad 87       	std	Y+13, r26	; 0x0d
    1da2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1daa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	4a e7       	ldi	r20, 0x7A	; 122
    1db2:	53 e4       	ldi	r21, 0x43	; 67
    1db4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	8f 83       	std	Y+7, r24	; 0x07
    1dbe:	98 87       	std	Y+8, r25	; 0x08
    1dc0:	a9 87       	std	Y+9, r26	; 0x09
    1dc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc6:	78 85       	ldd	r23, Y+8	; 0x08
    1dc8:	89 85       	ldd	r24, Y+9	; 0x09
    1dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e8       	ldi	r20, 0x80	; 128
    1dd2:	5f e3       	ldi	r21, 0x3F	; 63
    1dd4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dd8:	88 23       	and	r24, r24
    1dda:	2c f4       	brge	.+10     	; 0x1de6 <LCD_enu_Init+0x522>
		__ticks = 1;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
    1de4:	3f c0       	rjmp	.+126    	; 0x1e64 <LCD_enu_Init+0x5a0>
	else if (__tmp > 65535)
    1de6:	6f 81       	ldd	r22, Y+7	; 0x07
    1de8:	78 85       	ldd	r23, Y+8	; 0x08
    1dea:	89 85       	ldd	r24, Y+9	; 0x09
    1dec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	4c f5       	brge	.+82     	; 0x1e50 <LCD_enu_Init+0x58c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e2       	ldi	r20, 0x20	; 32
    1e0c:	51 e4       	ldi	r21, 0x41	; 65
    1e0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	bc 01       	movw	r22, r24
    1e18:	cd 01       	movw	r24, r26
    1e1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	9e 83       	std	Y+6, r25	; 0x06
    1e24:	8d 83       	std	Y+5, r24	; 0x05
    1e26:	0f c0       	rjmp	.+30     	; 0x1e46 <LCD_enu_Init+0x582>
    1e28:	89 e1       	ldi	r24, 0x19	; 25
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9c 83       	std	Y+4, r25	; 0x04
    1e2e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_enu_Init+0x570>
    1e38:	9c 83       	std	Y+4, r25	; 0x04
    1e3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	9e 83       	std	Y+6, r25	; 0x06
    1e44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e46:	8d 81       	ldd	r24, Y+5	; 0x05
    1e48:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	69 f7       	brne	.-38     	; 0x1e28 <LCD_enu_Init+0x564>
    1e4e:	14 c0       	rjmp	.+40     	; 0x1e78 <LCD_enu_Init+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e50:	6f 81       	ldd	r22, Y+7	; 0x07
    1e52:	78 85       	ldd	r23, Y+8	; 0x08
    1e54:	89 85       	ldd	r24, Y+9	; 0x09
    1e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	8d 81       	ldd	r24, Y+5	; 0x05
    1e66:	9e 81       	ldd	r25, Y+6	; 0x06
    1e68:	9a 83       	std	Y+2, r25	; 0x02
    1e6a:	89 83       	std	Y+1, r24	; 0x01
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_enu_Init+0x5ac>
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	LCD_enu_SendCommand(LCD_ENTRY_MODE);
    1e78:	86 e0       	ldi	r24, 0x06	; 6
    1e7a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_enu_SendCommand>

	return STD_TYPES_OK;
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
}
    1e80:	c4 5b       	subi	r28, 0xB4	; 180
    1e82:	df 4f       	sbci	r29, 0xFF	; 255
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	de bf       	out	0x3e, r29	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	cd bf       	out	0x3d, r28	; 61
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	08 95       	ret

00001e98 <LCD_enu_WriteCharacter>:

ES_t LCD_enu_WriteCharacter(u8 Copy_u8_char)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	6d 97       	sbiw	r28, 0x1d	; 29
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_enu_SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_enu_SetPinValue>
	DIO_enu_SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_enu_SetPinValue>

	DIO_enu_SetPortValue(LCD_u8_DATA_PORT,Copy_u8_char);
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ec6:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enu_SetPortValue>

	DIO_enu_SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	62 e0       	ldi	r22, 0x02	; 2
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_enu_SetPinValue>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a0 e0       	ldi	r26, 0x00	; 0
    1eda:	b0 e4       	ldi	r27, 0x40	; 64
    1edc:	89 8f       	std	Y+25, r24	; 0x19
    1ede:	9a 8f       	std	Y+26, r25	; 0x1a
    1ee0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ee2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	4a e7       	ldi	r20, 0x7A	; 122
    1ef2:	53 e4       	ldi	r21, 0x43	; 67
    1ef4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	8d 8b       	std	Y+21, r24	; 0x15
    1efe:	9e 8b       	std	Y+22, r25	; 0x16
    1f00:	af 8b       	std	Y+23, r26	; 0x17
    1f02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f04:	6d 89       	ldd	r22, Y+21	; 0x15
    1f06:	7e 89       	ldd	r23, Y+22	; 0x16
    1f08:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e8       	ldi	r20, 0x80	; 128
    1f12:	5f e3       	ldi	r21, 0x3F	; 63
    1f14:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f18:	88 23       	and	r24, r24
    1f1a:	2c f4       	brge	.+10     	; 0x1f26 <LCD_enu_WriteCharacter+0x8e>
		__ticks = 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	9c 8b       	std	Y+20, r25	; 0x14
    1f22:	8b 8b       	std	Y+19, r24	; 0x13
    1f24:	3f c0       	rjmp	.+126    	; 0x1fa4 <LCD_enu_WriteCharacter+0x10c>
	else if (__tmp > 65535)
    1f26:	6d 89       	ldd	r22, Y+21	; 0x15
    1f28:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	3f ef       	ldi	r19, 0xFF	; 255
    1f32:	4f e7       	ldi	r20, 0x7F	; 127
    1f34:	57 e4       	ldi	r21, 0x47	; 71
    1f36:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f3a:	18 16       	cp	r1, r24
    1f3c:	4c f5       	brge	.+82     	; 0x1f90 <LCD_enu_WriteCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e2       	ldi	r20, 0x20	; 32
    1f4c:	51 e4       	ldi	r21, 0x41	; 65
    1f4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9c 8b       	std	Y+20, r25	; 0x14
    1f64:	8b 8b       	std	Y+19, r24	; 0x13
    1f66:	0f c0       	rjmp	.+30     	; 0x1f86 <LCD_enu_WriteCharacter+0xee>
    1f68:	89 e1       	ldi	r24, 0x19	; 25
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9a 8b       	std	Y+18, r25	; 0x12
    1f6e:	89 8b       	std	Y+17, r24	; 0x11
    1f70:	89 89       	ldd	r24, Y+17	; 0x11
    1f72:	9a 89       	ldd	r25, Y+18	; 0x12
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_enu_WriteCharacter+0xdc>
    1f78:	9a 8b       	std	Y+18, r25	; 0x12
    1f7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	9c 8b       	std	Y+20, r25	; 0x14
    1f84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f86:	8b 89       	ldd	r24, Y+19	; 0x13
    1f88:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	69 f7       	brne	.-38     	; 0x1f68 <LCD_enu_WriteCharacter+0xd0>
    1f8e:	14 c0       	rjmp	.+40     	; 0x1fb8 <LCD_enu_WriteCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f90:	6d 89       	ldd	r22, Y+21	; 0x15
    1f92:	7e 89       	ldd	r23, Y+22	; 0x16
    1f94:	8f 89       	ldd	r24, Y+23	; 0x17
    1f96:	98 8d       	ldd	r25, Y+24	; 0x18
    1f98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9c 8b       	std	Y+20, r25	; 0x14
    1fa2:	8b 8b       	std	Y+19, r24	; 0x13
    1fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa8:	98 8b       	std	Y+16, r25	; 0x10
    1faa:	8f 87       	std	Y+15, r24	; 0x0f
    1fac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fae:	98 89       	ldd	r25, Y+16	; 0x10
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_enu_WriteCharacter+0x118>
    1fb4:	98 8b       	std	Y+16, r25	; 0x10
    1fb6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_enu_SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	62 e0       	ldi	r22, 0x02	; 2
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_enu_SetPinValue>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e0       	ldi	r26, 0x00	; 0
    1fc8:	b0 e4       	ldi	r27, 0x40	; 64
    1fca:	8b 87       	std	Y+11, r24	; 0x0b
    1fcc:	9c 87       	std	Y+12, r25	; 0x0c
    1fce:	ad 87       	std	Y+13, r26	; 0x0d
    1fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	53 e4       	ldi	r21, 0x43	; 67
    1fe2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8f 83       	std	Y+7, r24	; 0x07
    1fec:	98 87       	std	Y+8, r25	; 0x08
    1fee:	a9 87       	std	Y+9, r26	; 0x09
    1ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff4:	78 85       	ldd	r23, Y+8	; 0x08
    1ff6:	89 85       	ldd	r24, Y+9	; 0x09
    1ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <LCD_enu_WriteCharacter+0x17c>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9e 83       	std	Y+6, r25	; 0x06
    2010:	8d 83       	std	Y+5, r24	; 0x05
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <LCD_enu_WriteCharacter+0x1fa>
	else if (__tmp > 65535)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <LCD_enu_WriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	6b 85       	ldd	r22, Y+11	; 0x0b
    202e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2030:	8d 85       	ldd	r24, Y+13	; 0x0d
    2032:	9e 85       	ldd	r25, Y+14	; 0x0e
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9e 83       	std	Y+6, r25	; 0x06
    2052:	8d 83       	std	Y+5, r24	; 0x05
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <LCD_enu_WriteCharacter+0x1dc>
    2056:	89 e1       	ldi	r24, 0x19	; 25
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_enu_WriteCharacter+0x1ca>
    2066:	9c 83       	std	Y+4, r25	; 0x04
    2068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <LCD_enu_WriteCharacter+0x1be>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <LCD_enu_WriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <LCD_enu_WriteCharacter+0x206>
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_enu_SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	62 e0       	ldi	r22, 0x02	; 2
    20aa:	41 e0       	ldi	r20, 0x01	; 1
    20ac:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_enu_SetPinValue>

	return STD_TYPES_OK;
    20b0:	80 e0       	ldi	r24, 0x00	; 0

}
    20b2:	6d 96       	adiw	r28, 0x1d	; 29
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <LCD_enu_WriteString>:

ES_t LCD_enu_WriteString(s8 * Copy_ps8_String)
 {	
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <LCD_enu_WriteString+0x6>
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	9a 83       	std	Y+2, r25	; 0x02
    20d0:	89 83       	std	Y+1, r24	; 0x01
	do {
		LCD_enu_WriteCharacter(*Copy_ps8_String);
    20d2:	e9 81       	ldd	r30, Y+1	; 0x01
    20d4:	fa 81       	ldd	r31, Y+2	; 0x02
    20d6:	80 81       	ld	r24, Z
    20d8:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
		(Copy_ps8_String++);
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	9a 81       	ldd	r25, Y+2	; 0x02
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	89 83       	std	Y+1, r24	; 0x01
	}while(*Copy_ps8_String != '\0');
    20e6:	e9 81       	ldd	r30, Y+1	; 0x01
    20e8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ea:	80 81       	ld	r24, Z
    20ec:	88 23       	and	r24, r24
    20ee:	89 f7       	brne	.-30     	; 0x20d2 <LCD_enu_WriteString+0xe>

	return STD_TYPES_OK;
    20f0:	80 e0       	ldi	r24, 0x00	; 0
 }
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <LCD_enu_WriteSizedString>:

ES_t LCD_enu_WriteSizedString(s8 * Copy_ps8_String,u8 Copy_u8_size)
{	
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <LCD_enu_WriteSizedString+0x6>
    2102:	00 d0       	rcall	.+0      	; 0x2104 <LCD_enu_WriteSizedString+0x8>
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	9b 83       	std	Y+3, r25	; 0x03
    210a:	8a 83       	std	Y+2, r24	; 0x02
    210c:	6c 83       	std	Y+4, r22	; 0x04
	u8 Copy_u8_iterator = 0;
    210e:	19 82       	std	Y+1, r1	; 0x01
	do {
		LCD_enu_WriteCharacter(*Copy_ps8_String);
    2110:	ea 81       	ldd	r30, Y+2	; 0x02
    2112:	fb 81       	ldd	r31, Y+3	; 0x03
    2114:	80 81       	ld	r24, Z
    2116:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
		(Copy_ps8_String++);
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	9b 81       	ldd	r25, Y+3	; 0x03
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	9b 83       	std	Y+3, r25	; 0x03
    2122:	8a 83       	std	Y+2, r24	; 0x02
		Copy_u8_iterator++;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	8f 5f       	subi	r24, 0xFF	; 255
    2128:	89 83       	std	Y+1, r24	; 0x01
	}while(Copy_u8_size > Copy_u8_iterator);
    212a:	9c 81       	ldd	r25, Y+4	; 0x04
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	89 17       	cp	r24, r25
    2130:	78 f3       	brcs	.-34     	; 0x2110 <LCD_enu_WriteSizedString+0x14>

	return STD_TYPES_OK;
    2132:	80 e0       	ldi	r24, 0x00	; 0
}
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <LCD_enu_WriteNumber>:

ES_t LCD_enu_WriteNumber(u16 Copy_u16_Number)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <LCD_enu_WriteNumber+0x6>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_u16_Number < 10) {
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	8a 30       	cpi	r24, 0x0A	; 10
    2156:	91 05       	cpc	r25, r1
    2158:	40 f4       	brcc	.+16     	; 0x216a <LCD_enu_WriteNumber+0x28>
		LCD_enu_WriteCharacter('0');
    215a:	80 e3       	ldi	r24, 0x30	; 48
    215c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
		LCD_enu_WriteCharacter(Copy_u16_Number+'0');
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	80 5d       	subi	r24, 0xD0	; 208
    2164:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
    2168:	8c c0       	rjmp	.+280    	; 0x2282 <LCD_enu_WriteNumber+0x140>
	}
	else {
		if (Copy_u16_Number < 100) {
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	84 36       	cpi	r24, 0x64	; 100
    2170:	91 05       	cpc	r25, r1
    2172:	b0 f4       	brcc	.+44     	; 0x21a0 <LCD_enu_WriteNumber+0x5e>
			LCD_enu_WriteCharacter(Copy_u16_Number/10+'0');
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	9a 81       	ldd	r25, Y+2	; 0x02
    2178:	2a e0       	ldi	r18, 0x0A	; 10
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	b9 01       	movw	r22, r18
    217e:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    2182:	cb 01       	movw	r24, r22
    2184:	80 5d       	subi	r24, 0xD0	; 208
    2186:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter(Copy_u16_Number%10+'0');
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	2a e0       	ldi	r18, 0x0A	; 10
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	b9 01       	movw	r22, r18
    2194:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    2198:	80 5d       	subi	r24, 0xD0	; 208
    219a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
    219e:	71 c0       	rjmp	.+226    	; 0x2282 <LCD_enu_WriteNumber+0x140>
		}
		else if (Copy_u16_Number < 1000) {
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	9a 81       	ldd	r25, Y+2	; 0x02
    21a4:	23 e0       	ldi	r18, 0x03	; 3
    21a6:	88 3e       	cpi	r24, 0xE8	; 232
    21a8:	92 07       	cpc	r25, r18
    21aa:	58 f5       	brcc	.+86     	; 0x2202 <LCD_enu_WriteNumber+0xc0>
			LCD_enu_WriteCharacter((Copy_u16_Number/100)+'0');
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	24 e6       	ldi	r18, 0x64	; 100
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	b9 01       	movw	r22, r18
    21b6:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    21ba:	cb 01       	movw	r24, r22
    21bc:	80 5d       	subi	r24, 0xD0	; 208
    21be:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter((Copy_u16_Number%100)/10+'0');
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	24 e6       	ldi	r18, 0x64	; 100
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	b9 01       	movw	r22, r18
    21cc:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    21d0:	2a e0       	ldi	r18, 0x0A	; 10
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	b9 01       	movw	r22, r18
    21d6:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    21da:	cb 01       	movw	r24, r22
    21dc:	80 5d       	subi	r24, 0xD0	; 208
    21de:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter((Copy_u16_Number%100)%10+'0');
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	24 e6       	ldi	r18, 0x64	; 100
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	b9 01       	movw	r22, r18
    21ec:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    21f0:	2a e0       	ldi	r18, 0x0A	; 10
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	b9 01       	movw	r22, r18
    21f6:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    21fa:	80 5d       	subi	r24, 0xD0	; 208
    21fc:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
    2200:	40 c0       	rjmp	.+128    	; 0x2282 <LCD_enu_WriteNumber+0x140>
		}
		else if (Copy_u16_Number < 10000)
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	27 e2       	ldi	r18, 0x27	; 39
    2208:	80 31       	cpi	r24, 0x10	; 16
    220a:	92 07       	cpc	r25, r18
    220c:	d0 f5       	brcc	.+116    	; 0x2282 <LCD_enu_WriteNumber+0x140>
		{
			LCD_enu_WriteCharacter((Copy_u16_Number/1000)+'0');
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	28 ee       	ldi	r18, 0xE8	; 232
    2214:	33 e0       	ldi	r19, 0x03	; 3
    2216:	b9 01       	movw	r22, r18
    2218:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    221c:	cb 01       	movw	r24, r22
    221e:	80 5d       	subi	r24, 0xD0	; 208
    2220:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter((Copy_u16_Number%1000)/100+'0');
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	9a 81       	ldd	r25, Y+2	; 0x02
    2228:	28 ee       	ldi	r18, 0xE8	; 232
    222a:	33 e0       	ldi	r19, 0x03	; 3
    222c:	b9 01       	movw	r22, r18
    222e:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    2232:	24 e6       	ldi	r18, 0x64	; 100
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	b9 01       	movw	r22, r18
    2238:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    223c:	cb 01       	movw	r24, r22
    223e:	80 5d       	subi	r24, 0xD0	; 208
    2240:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter((Copy_u16_Number%100)/10+'0');
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	24 e6       	ldi	r18, 0x64	; 100
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	b9 01       	movw	r22, r18
    224e:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    2252:	2a e0       	ldi	r18, 0x0A	; 10
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	b9 01       	movw	r22, r18
    2258:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    225c:	cb 01       	movw	r24, r22
    225e:	80 5d       	subi	r24, 0xD0	; 208
    2260:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter((Copy_u16_Number%100)%10+'0');
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	24 e6       	ldi	r18, 0x64	; 100
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	b9 01       	movw	r22, r18
    226e:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    2272:	2a e0       	ldi	r18, 0x0A	; 10
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	b9 01       	movw	r22, r18
    2278:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    227c:	80 5d       	subi	r24, 0xD0	; 208
    227e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
		}
	}

	return STD_TYPES_OK;
    2282:	80 e0       	ldi	r24, 0x00	; 0
}
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <LCD_enu_WriteSizedNumber>:

ES_t LCD_enu_WriteSizedNumber(u16 Copy_u16_Number, u8 Copy_u8_size)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	00 d0       	rcall	.+0      	; 0x2294 <LCD_enu_WriteSizedNumber+0x6>
    2294:	00 d0       	rcall	.+0      	; 0x2296 <LCD_enu_WriteSizedNumber+0x8>
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	9b 83       	std	Y+3, r25	; 0x03
    229c:	8a 83       	std	Y+2, r24	; 0x02
    229e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Copy_u8_iterator;
	if(Copy_u16_Number < 10) {
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	9b 81       	ldd	r25, Y+3	; 0x03
    22a4:	8a 30       	cpi	r24, 0x0A	; 10
    22a6:	91 05       	cpc	r25, r1
    22a8:	b8 f4       	brcc	.+46     	; 0x22d8 <LCD_enu_WriteSizedNumber+0x4a>
		for (Copy_u8_iterator = 0; Copy_u8_iterator < Copy_u8_size-1; Copy_u8_iterator++)
    22aa:	19 82       	std	Y+1, r1	; 0x01
    22ac:	06 c0       	rjmp	.+12     	; 0x22ba <LCD_enu_WriteSizedNumber+0x2c>
		{		
			LCD_enu_WriteCharacter('0');
    22ae:	80 e3       	ldi	r24, 0x30	; 48
    22b0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>

ES_t LCD_enu_WriteSizedNumber(u16 Copy_u16_Number, u8 Copy_u8_size)
{
	u8 Copy_u8_iterator;
	if(Copy_u16_Number < 10) {
		for (Copy_u8_iterator = 0; Copy_u8_iterator < Copy_u8_size-1; Copy_u8_iterator++)
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	8f 5f       	subi	r24, 0xFF	; 255
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	8c 81       	ldd	r24, Y+4	; 0x04
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	28 17       	cp	r18, r24
    22ca:	39 07       	cpc	r19, r25
    22cc:	84 f3       	brlt	.-32     	; 0x22ae <LCD_enu_WriteSizedNumber+0x20>
		{		
			LCD_enu_WriteCharacter('0');
		}
		LCD_enu_WriteCharacter(Copy_u16_Number+'0');
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	80 5d       	subi	r24, 0xD0	; 208
    22d2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
    22d6:	c3 c0       	rjmp	.+390    	; 0x245e <LCD_enu_WriteSizedNumber+0x1d0>
	}
	else {
		if (Copy_u16_Number < 100) {
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	9b 81       	ldd	r25, Y+3	; 0x03
    22dc:	84 36       	cpi	r24, 0x64	; 100
    22de:	91 05       	cpc	r25, r1
    22e0:	40 f5       	brcc	.+80     	; 0x2332 <LCD_enu_WriteSizedNumber+0xa4>
			for (Copy_u8_iterator = 0; Copy_u8_iterator < Copy_u8_size-2; Copy_u8_iterator++)
    22e2:	19 82       	std	Y+1, r1	; 0x01
    22e4:	06 c0       	rjmp	.+12     	; 0x22f2 <LCD_enu_WriteSizedNumber+0x64>
			{		
				LCD_enu_WriteCharacter('0');
    22e6:	80 e3       	ldi	r24, 0x30	; 48
    22e8:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
		}
		LCD_enu_WriteCharacter(Copy_u16_Number+'0');
	}
	else {
		if (Copy_u16_Number < 100) {
			for (Copy_u8_iterator = 0; Copy_u8_iterator < Copy_u8_size-2; Copy_u8_iterator++)
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	8c 81       	ldd	r24, Y+4	; 0x04
    22fa:	88 2f       	mov	r24, r24
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	02 97       	sbiw	r24, 0x02	; 2
    2300:	28 17       	cp	r18, r24
    2302:	39 07       	cpc	r19, r25
    2304:	84 f3       	brlt	.-32     	; 0x22e6 <LCD_enu_WriteSizedNumber+0x58>
			{		
				LCD_enu_WriteCharacter('0');
			}

			LCD_enu_WriteCharacter(Copy_u16_Number/10+'0');
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	9b 81       	ldd	r25, Y+3	; 0x03
    230a:	2a e0       	ldi	r18, 0x0A	; 10
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	b9 01       	movw	r22, r18
    2310:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    2314:	cb 01       	movw	r24, r22
    2316:	80 5d       	subi	r24, 0xD0	; 208
    2318:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter(Copy_u16_Number%10+'0');
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	2a e0       	ldi	r18, 0x0A	; 10
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	b9 01       	movw	r22, r18
    2326:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    232a:	80 5d       	subi	r24, 0xD0	; 208
    232c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
    2330:	96 c0       	rjmp	.+300    	; 0x245e <LCD_enu_WriteSizedNumber+0x1d0>
		}
		else if (Copy_u16_Number < 1000) {
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	9b 81       	ldd	r25, Y+3	; 0x03
    2336:	23 e0       	ldi	r18, 0x03	; 3
    2338:	88 3e       	cpi	r24, 0xE8	; 232
    233a:	92 07       	cpc	r25, r18
    233c:	e8 f5       	brcc	.+122    	; 0x23b8 <LCD_enu_WriteSizedNumber+0x12a>
			for (Copy_u8_iterator = 0; Copy_u8_iterator < Copy_u8_size-3; Copy_u8_iterator++)
    233e:	19 82       	std	Y+1, r1	; 0x01
    2340:	06 c0       	rjmp	.+12     	; 0x234e <LCD_enu_WriteSizedNumber+0xc0>
			{		
				LCD_enu_WriteCharacter('0');
    2342:	80 e3       	ldi	r24, 0x30	; 48
    2344:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>

			LCD_enu_WriteCharacter(Copy_u16_Number/10+'0');
			LCD_enu_WriteCharacter(Copy_u16_Number%10+'0');
		}
		else if (Copy_u16_Number < 1000) {
			for (Copy_u8_iterator = 0; Copy_u8_iterator < Copy_u8_size-3; Copy_u8_iterator++)
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	8f 5f       	subi	r24, 0xFF	; 255
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	8c 81       	ldd	r24, Y+4	; 0x04
    2356:	88 2f       	mov	r24, r24
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	03 97       	sbiw	r24, 0x03	; 3
    235c:	28 17       	cp	r18, r24
    235e:	39 07       	cpc	r19, r25
    2360:	84 f3       	brlt	.-32     	; 0x2342 <LCD_enu_WriteSizedNumber+0xb4>
			{		
				LCD_enu_WriteCharacter('0');
			}
			LCD_enu_WriteCharacter((Copy_u16_Number/100)+'0');
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	9b 81       	ldd	r25, Y+3	; 0x03
    2366:	24 e6       	ldi	r18, 0x64	; 100
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	b9 01       	movw	r22, r18
    236c:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    2370:	cb 01       	movw	r24, r22
    2372:	80 5d       	subi	r24, 0xD0	; 208
    2374:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter((Copy_u16_Number%100)/10+'0');
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	9b 81       	ldd	r25, Y+3	; 0x03
    237c:	24 e6       	ldi	r18, 0x64	; 100
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	b9 01       	movw	r22, r18
    2382:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    2386:	2a e0       	ldi	r18, 0x0A	; 10
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	b9 01       	movw	r22, r18
    238c:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    2390:	cb 01       	movw	r24, r22
    2392:	80 5d       	subi	r24, 0xD0	; 208
    2394:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter((Copy_u16_Number%100)%10+'0');
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	9b 81       	ldd	r25, Y+3	; 0x03
    239c:	24 e6       	ldi	r18, 0x64	; 100
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	b9 01       	movw	r22, r18
    23a2:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    23a6:	2a e0       	ldi	r18, 0x0A	; 10
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	b9 01       	movw	r22, r18
    23ac:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    23b0:	80 5d       	subi	r24, 0xD0	; 208
    23b2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
    23b6:	53 c0       	rjmp	.+166    	; 0x245e <LCD_enu_WriteSizedNumber+0x1d0>
		}
		else if (Copy_u16_Number < 10000)
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	27 e2       	ldi	r18, 0x27	; 39
    23be:	80 31       	cpi	r24, 0x10	; 16
    23c0:	92 07       	cpc	r25, r18
    23c2:	08 f0       	brcs	.+2      	; 0x23c6 <LCD_enu_WriteSizedNumber+0x138>
    23c4:	4c c0       	rjmp	.+152    	; 0x245e <LCD_enu_WriteSizedNumber+0x1d0>
		{
			for (Copy_u8_iterator = 0; Copy_u8_iterator < Copy_u8_size-4; Copy_u8_iterator++)
    23c6:	19 82       	std	Y+1, r1	; 0x01
    23c8:	06 c0       	rjmp	.+12     	; 0x23d6 <LCD_enu_WriteSizedNumber+0x148>
			{		
				LCD_enu_WriteCharacter('0');
    23ca:	80 e3       	ldi	r24, 0x30	; 48
    23cc:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter((Copy_u16_Number%100)/10+'0');
			LCD_enu_WriteCharacter((Copy_u16_Number%100)%10+'0');
		}
		else if (Copy_u16_Number < 10000)
		{
			for (Copy_u8_iterator = 0; Copy_u8_iterator < Copy_u8_size-4; Copy_u8_iterator++)
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	8f 5f       	subi	r24, 0xFF	; 255
    23d4:	89 83       	std	Y+1, r24	; 0x01
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	8c 81       	ldd	r24, Y+4	; 0x04
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	04 97       	sbiw	r24, 0x04	; 4
    23e4:	28 17       	cp	r18, r24
    23e6:	39 07       	cpc	r19, r25
    23e8:	84 f3       	brlt	.-32     	; 0x23ca <LCD_enu_WriteSizedNumber+0x13c>
			{		
				LCD_enu_WriteCharacter('0');
			}
			LCD_enu_WriteCharacter((Copy_u16_Number/1000)+'0');
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	9b 81       	ldd	r25, Y+3	; 0x03
    23ee:	28 ee       	ldi	r18, 0xE8	; 232
    23f0:	33 e0       	ldi	r19, 0x03	; 3
    23f2:	b9 01       	movw	r22, r18
    23f4:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    23f8:	cb 01       	movw	r24, r22
    23fa:	80 5d       	subi	r24, 0xD0	; 208
    23fc:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter((Copy_u16_Number%1000)/100+'0');
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	28 ee       	ldi	r18, 0xE8	; 232
    2406:	33 e0       	ldi	r19, 0x03	; 3
    2408:	b9 01       	movw	r22, r18
    240a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    240e:	24 e6       	ldi	r18, 0x64	; 100
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	b9 01       	movw	r22, r18
    2414:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    2418:	cb 01       	movw	r24, r22
    241a:	80 5d       	subi	r24, 0xD0	; 208
    241c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter((Copy_u16_Number%100)/10+'0');
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	9b 81       	ldd	r25, Y+3	; 0x03
    2424:	24 e6       	ldi	r18, 0x64	; 100
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	b9 01       	movw	r22, r18
    242a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    242e:	2a e0       	ldi	r18, 0x0A	; 10
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	b9 01       	movw	r22, r18
    2434:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    2438:	cb 01       	movw	r24, r22
    243a:	80 5d       	subi	r24, 0xD0	; 208
    243c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
			LCD_enu_WriteCharacter((Copy_u16_Number%100)%10+'0');
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	9b 81       	ldd	r25, Y+3	; 0x03
    2444:	24 e6       	ldi	r18, 0x64	; 100
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	b9 01       	movw	r22, r18
    244a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    244e:	2a e0       	ldi	r18, 0x0A	; 10
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	b9 01       	movw	r22, r18
    2454:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    2458:	80 5d       	subi	r24, 0xD0	; 208
    245a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
		}
	}

	return STD_TYPES_OK;
    245e:	80 e0       	ldi	r24, 0x00	; 0
}
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	08 95       	ret

0000246e <LCD_enu_GoToXY>:

ES_t LCD_enu_GoToXY(u8 Copy_u8_LineNumber, u8 Copy_u8_Location) {
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	00 d0       	rcall	.+0      	; 0x2474 <LCD_enu_GoToXY+0x6>
    2474:	00 d0       	rcall	.+0      	; 0x2476 <LCD_enu_GoToXY+0x8>
    2476:	0f 92       	push	r0
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8_Location<=MAX_LOCATION)
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	88 32       	cpi	r24, 0x28	; 40
    2484:	f0 f4       	brcc	.+60     	; 0x24c2 <LCD_enu_GoToXY+0x54>
	{
		switch(Copy_u8_LineNumber) {
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	3d 83       	std	Y+5, r19	; 0x05
    248e:	2c 83       	std	Y+4, r18	; 0x04
    2490:	8c 81       	ldd	r24, Y+4	; 0x04
    2492:	9d 81       	ldd	r25, Y+5	; 0x05
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	31 f0       	breq	.+12     	; 0x24a4 <LCD_enu_GoToXY+0x36>
    2498:	2c 81       	ldd	r18, Y+4	; 0x04
    249a:	3d 81       	ldd	r19, Y+5	; 0x05
    249c:	21 30       	cpi	r18, 0x01	; 1
    249e:	31 05       	cpc	r19, r1
    24a0:	31 f0       	breq	.+12     	; 0x24ae <LCD_enu_GoToXY+0x40>
    24a2:	0a c0       	rjmp	.+20     	; 0x24b8 <LCD_enu_GoToXY+0x4a>
			case LCD_u8_LINE0:LCD_enu_SendCommand(ADDRESS_OF_LINE1+Copy_u8_Location);break;
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	80 58       	subi	r24, 0x80	; 128
    24a8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_enu_SendCommand>
    24ac:	08 c0       	rjmp	.+16     	; 0x24be <LCD_enu_GoToXY+0x50>
			case LCD_u8_LINE1:LCD_enu_SendCommand(ADDRESS_OF_LINE0+Copy_u8_Location);break;
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	80 54       	subi	r24, 0x40	; 64
    24b2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_enu_SendCommand>
    24b6:	03 c0       	rjmp	.+6      	; 0x24be <LCD_enu_GoToXY+0x50>
			default: return STD_TYPES_NOK;
    24b8:	31 e0       	ldi	r19, 0x01	; 1
    24ba:	3b 83       	std	Y+3, r19	; 0x03
    24bc:	04 c0       	rjmp	.+8      	; 0x24c6 <LCD_enu_GoToXY+0x58>
		}
	}else{
		return STD_TYPES_NOK;
	}
	return STD_TYPES_OK;
    24be:	1b 82       	std	Y+3, r1	; 0x03
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <LCD_enu_GoToXY+0x58>
			case LCD_u8_LINE0:LCD_enu_SendCommand(ADDRESS_OF_LINE1+Copy_u8_Location);break;
			case LCD_u8_LINE1:LCD_enu_SendCommand(ADDRESS_OF_LINE0+Copy_u8_Location);break;
			default: return STD_TYPES_NOK;
		}
	}else{
		return STD_TYPES_NOK;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	8b 83       	std	Y+3, r24	; 0x03
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
	}
	return STD_TYPES_OK;
}
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <LCD_enu_CreateCustomChar>:

ES_t LCD_enu_CreateCustomChar(u8 * Copy_pu8_Char, u8 Copy_u8_Location) {
    24d8:	df 93       	push	r29
    24da:	cf 93       	push	r28
    24dc:	00 d0       	rcall	.+0      	; 0x24de <LCD_enu_CreateCustomChar+0x6>
    24de:	00 d0       	rcall	.+0      	; 0x24e0 <LCD_enu_CreateCustomChar+0x8>
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	9b 83       	std	Y+3, r25	; 0x03
    24e6:	8a 83       	std	Y+2, r24	; 0x02
    24e8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Copy_u8_iterator = INITIAL_VALUE;
    24ea:	19 82       	std	Y+1, r1	; 0x01
	LCD_enu_SendCommand(0x40+(Copy_u8_Location*COLS_NUMBER)); /*Command 0x40 and onwards forces to point CGRAM address*/
    24ec:	8c 81       	ldd	r24, Y+4	; 0x04
    24ee:	88 2f       	mov	r24, r24
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	08 96       	adiw	r24, 0x08	; 8
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	88 0f       	add	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_enu_SendCommand>
    2504:	0e c0       	rjmp	.+28     	; 0x2522 <LCD_enu_CreateCustomChar+0x4a>
	while (Copy_u8_iterator != COLS_NUMBER) {
		LCD_enu_WriteCharacter(*Copy_pu8_Char++);
    2506:	ea 81       	ldd	r30, Y+2	; 0x02
    2508:	fb 81       	ldd	r31, Y+3	; 0x03
    250a:	20 81       	ld	r18, Z
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	9b 81       	ldd	r25, Y+3	; 0x03
    2510:	01 96       	adiw	r24, 0x01	; 1
    2512:	9b 83       	std	Y+3, r25	; 0x03
    2514:	8a 83       	std	Y+2, r24	; 0x02
    2516:	82 2f       	mov	r24, r18
    2518:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
		Copy_u8_iterator++;
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	8f 5f       	subi	r24, 0xFF	; 255
    2520:	89 83       	std	Y+1, r24	; 0x01
}

ES_t LCD_enu_CreateCustomChar(u8 * Copy_pu8_Char, u8 Copy_u8_Location) {
	u8 Copy_u8_iterator = INITIAL_VALUE;
	LCD_enu_SendCommand(0x40+(Copy_u8_Location*COLS_NUMBER)); /*Command 0x40 and onwards forces to point CGRAM address*/
	while (Copy_u8_iterator != COLS_NUMBER) {
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	88 30       	cpi	r24, 0x08	; 8
    2526:	79 f7       	brne	.-34     	; 0x2506 <LCD_enu_CreateCustomChar+0x2e>
		LCD_enu_WriteCharacter(*Copy_pu8_Char++);
		Copy_u8_iterator++;
	}
	LCD_enu_WriteCharacter(0x00+Copy_u8_Location);
    2528:	8c 81       	ldd	r24, Y+4	; 0x04
    252a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>
	return STD_TYPES_OK;
    252e:	80 e0       	ldi	r24, 0x00	; 0
}
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <LCD_vidClearSpace>:

ES_t LCD_vidClearSpace(u8 Copy_u8_xPosStart, u8 Copy_u8_xPosEnd ,u8 Copy_u8_yPos)
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <LCD_vidClearSpace+0x6>
    2544:	00 d0       	rcall	.+0      	; 0x2546 <LCD_vidClearSpace+0x8>
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	8a 83       	std	Y+2, r24	; 0x02
    254c:	6b 83       	std	Y+3, r22	; 0x03
    254e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Copy_u8_iterator = INITIAL_VALUE;
    2550:	19 82       	std	Y+1, r1	; 0x01
	LCD_enu_GoToXY(Copy_u8_xPosStart,Copy_u8_yPos);
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	6c 81       	ldd	r22, Y+4	; 0x04
    2556:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_enu_GoToXY>
	for (Copy_u8_iterator = 0; Copy_u8_iterator < Copy_u8_xPosEnd; Copy_u8_iterator++)
    255a:	19 82       	std	Y+1, r1	; 0x01
    255c:	06 c0       	rjmp	.+12     	; 0x256a <LCD_vidClearSpace+0x2c>
	{
		LCD_enu_WriteCharacter(' ');
    255e:	80 e2       	ldi	r24, 0x20	; 32
    2560:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_enu_WriteCharacter>

ES_t LCD_vidClearSpace(u8 Copy_u8_xPosStart, u8 Copy_u8_xPosEnd ,u8 Copy_u8_yPos)
{
	u8 Copy_u8_iterator = INITIAL_VALUE;
	LCD_enu_GoToXY(Copy_u8_xPosStart,Copy_u8_yPos);
	for (Copy_u8_iterator = 0; Copy_u8_iterator < Copy_u8_xPosEnd; Copy_u8_iterator++)
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	8f 5f       	subi	r24, 0xFF	; 255
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	99 81       	ldd	r25, Y+1	; 0x01
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	98 17       	cp	r25, r24
    2570:	b0 f3       	brcs	.-20     	; 0x255e <LCD_vidClearSpace+0x20>
	{
		LCD_enu_WriteCharacter(' ');
	}
	LCD_enu_GoToXY(Copy_u8_xPosStart,Copy_u8_yPos);
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	6c 81       	ldd	r22, Y+4	; 0x04
    2576:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_enu_GoToXY>
	return STD_TYPES_OK;
    257a:	80 e0       	ldi	r24, 0x00	; 0
}
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <LCD_enu_Clear>:

ES_t LCD_enu_Clear(void){
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_SendCommand(LCD_CLEAR_SCREEN);
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_enu_SendCommand>
	return STD_TYPES_OK;
    2598:	80 e0       	ldi	r24, 0x00	; 0
}
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <main>:
#include "STD_TYPES.h"
#include "DIO_Confiq.h"
#include "DIO_Private.h"
#include "LCD_Private.h"
#include "LCD_Confiq.h"
int main(void){
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62



	DIO_enu_Init();
    25a8:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_enu_Init>
	LCD_enu_Init();
    25ac:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <LCD_enu_Init>
	LCD_enu_GoToXY(0, 0);
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	60 e0       	ldi	r22, 0x00	; 0
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_enu_GoToXY>
	LCD_enu_WriteNumber(2023);
    25bc:	87 ee       	ldi	r24, 0xE7	; 231
    25be:	97 e0       	ldi	r25, 0x07	; 7
    25c0:	0e 94 a1 10 	call	0x2142	; 0x2142 <LCD_enu_WriteNumber>
	LCD_enu_WriteString("IEEE-ZSB-RAS ");
    25c4:	80 e6       	ldi	r24, 0x60	; 96
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 62 10 	call	0x20c4	; 0x20c4 <LCD_enu_WriteString>
	LCD_enu_GoToXY(1, 2);
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	62 e0       	ldi	r22, 0x02	; 2
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	0e 94 37 12 	call	0x246e	; 0x246e <LCD_enu_GoToXY>
	LCD_enu_WriteString("Karam Yaseen");
    25d8:	8e e6       	ldi	r24, 0x6E	; 110
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	0e 94 62 10 	call	0x20c4	; 0x20c4 <LCD_enu_WriteString>
    25e0:	ff cf       	rjmp	.-2      	; 0x25e0 <main+0x40>

000025e2 <__udivmodhi4>:
    25e2:	aa 1b       	sub	r26, r26
    25e4:	bb 1b       	sub	r27, r27
    25e6:	51 e1       	ldi	r21, 0x11	; 17
    25e8:	07 c0       	rjmp	.+14     	; 0x25f8 <__udivmodhi4_ep>

000025ea <__udivmodhi4_loop>:
    25ea:	aa 1f       	adc	r26, r26
    25ec:	bb 1f       	adc	r27, r27
    25ee:	a6 17       	cp	r26, r22
    25f0:	b7 07       	cpc	r27, r23
    25f2:	10 f0       	brcs	.+4      	; 0x25f8 <__udivmodhi4_ep>
    25f4:	a6 1b       	sub	r26, r22
    25f6:	b7 0b       	sbc	r27, r23

000025f8 <__udivmodhi4_ep>:
    25f8:	88 1f       	adc	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	5a 95       	dec	r21
    25fe:	a9 f7       	brne	.-22     	; 0x25ea <__udivmodhi4_loop>
    2600:	80 95       	com	r24
    2602:	90 95       	com	r25
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	08 95       	ret

0000260a <__prologue_saves__>:
    260a:	2f 92       	push	r2
    260c:	3f 92       	push	r3
    260e:	4f 92       	push	r4
    2610:	5f 92       	push	r5
    2612:	6f 92       	push	r6
    2614:	7f 92       	push	r7
    2616:	8f 92       	push	r8
    2618:	9f 92       	push	r9
    261a:	af 92       	push	r10
    261c:	bf 92       	push	r11
    261e:	cf 92       	push	r12
    2620:	df 92       	push	r13
    2622:	ef 92       	push	r14
    2624:	ff 92       	push	r15
    2626:	0f 93       	push	r16
    2628:	1f 93       	push	r17
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	ca 1b       	sub	r28, r26
    2634:	db 0b       	sbc	r29, r27
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	09 94       	ijmp

00002642 <__epilogue_restores__>:
    2642:	2a 88       	ldd	r2, Y+18	; 0x12
    2644:	39 88       	ldd	r3, Y+17	; 0x11
    2646:	48 88       	ldd	r4, Y+16	; 0x10
    2648:	5f 84       	ldd	r5, Y+15	; 0x0f
    264a:	6e 84       	ldd	r6, Y+14	; 0x0e
    264c:	7d 84       	ldd	r7, Y+13	; 0x0d
    264e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2650:	9b 84       	ldd	r9, Y+11	; 0x0b
    2652:	aa 84       	ldd	r10, Y+10	; 0x0a
    2654:	b9 84       	ldd	r11, Y+9	; 0x09
    2656:	c8 84       	ldd	r12, Y+8	; 0x08
    2658:	df 80       	ldd	r13, Y+7	; 0x07
    265a:	ee 80       	ldd	r14, Y+6	; 0x06
    265c:	fd 80       	ldd	r15, Y+5	; 0x05
    265e:	0c 81       	ldd	r16, Y+4	; 0x04
    2660:	1b 81       	ldd	r17, Y+3	; 0x03
    2662:	aa 81       	ldd	r26, Y+2	; 0x02
    2664:	b9 81       	ldd	r27, Y+1	; 0x01
    2666:	ce 0f       	add	r28, r30
    2668:	d1 1d       	adc	r29, r1
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	ed 01       	movw	r28, r26
    2676:	08 95       	ret

00002678 <_exit>:
    2678:	f8 94       	cli

0000267a <__stop_program>:
    267a:	ff cf       	rjmp	.-2      	; 0x267a <__stop_program>
